<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BooksExchanger</name>
    </assembly>
    <members>
        <member name="T:BooksExchanger.Attributes.Auth.AdminAuthorizeAttribute">
            <summary>
            Атрибут авторизации с правами админа.
            </summary>
        </member>
        <member name="M:BooksExchanger.Attributes.Auth.AdminAuthorizeAttribute.OnAuthorization(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
            <summary>
            Проверка авторизации админа.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:BooksExchanger.Attributes.Auth.CheckAuthorizeAttribute">
            <summary>
            Атрибут проверки авторизации.
            </summary>
        </member>
        <member name="M:BooksExchanger.Attributes.Auth.CheckAuthorizeAttribute.OnAuthorization(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
            <summary>
            Проверка авторизации.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:BooksExchanger.Attributes.Auth.UserAuthorizeAttribute">
            <summary>
            Атрибут авторизации пользователя.
            </summary>
        </member>
        <member name="M:BooksExchanger.Attributes.Auth.UserAuthorizeAttribute.OnAuthorization(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
            <summary>
            Проверка авторизации пользователя.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:BooksExchanger.Controllers.AuthorsController">
            <summary>
            Контроллер авторов.
            </summary>
        </member>
        <member name="M:BooksExchanger.Controllers.AuthorsController.#ctor(BooksExchanger.Services.Interfaces.IAuthorService)">
            <summary>
            Конструктор контроллера.
            </summary>
            <param name="authorService">Сервис авторов.</param>
        </member>
        <member name="M:BooksExchanger.Controllers.AuthorsController.Create(BooksExchanger.Controllers.Specs.Authors.CreateAuthorRequest)">
            <summary>
            Создает нового автора.
            </summary>
            <param name="request"></param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.AuthorsController.UpdateAuthor(BooksExchanger.Controllers.Specs.Authors.UpdateAuthorRequest)">
            <summary>
            Редактирует автора по id.
            </summary>
            <param name="request"></param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
            <response code="404">Автора с таким id не существует.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.AuthorsController.GetAuthors">
            <summary>
            Отдает всех существующих авторов.
            </summary>
            <param name="request"></param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.AuthorsController.RemoveAuthor(System.Int64)">
            <summary>
            Удаляет автора по id.
            </summary>
            <param name="authorId">id автора.</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
            <response code="404">Автора не существует.</response>
            <response code="409">К данному автору привязаны книги.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.AuthorsController.SearchAuthorsByName(System.String)">
            <summary>
            Осуществляет поиск авторов.
            </summary>
            <param name="authorName">Начало ФИО автора.</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
        </member>
        <member name="T:BooksExchanger.Controllers.BooksController">
            <summary>
            Контроллер книг.
            </summary>
        </member>
        <member name="M:BooksExchanger.Controllers.BooksController.#ctor(BooksExchanger.Services.Interfaces.IBookService)">
            <summary>
            Конструктор контроллера.
            </summary>
            <param name="bookService">Сервис книг.</param>
        </member>
        <member name="M:BooksExchanger.Controllers.BooksController.Create(BooksExchanger.Controllers.Specs.Books.CreateBookRequest)">
            <summary>
            Создает новую книгу.
            </summary>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
            <response code="409">Не существует указанных авторов или жанра.</response>
            <response code="500">Неизвестная ошибка.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.BooksController.Update(BooksExchanger.Controllers.Specs.Books.UpdateBookRequest)">
            <summary>
            Редактирует существующую книгу.
            </summary>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
            <response code="404">Не найдено книги.</response>
            <response code="409">Не существует указанных авторов или жанра.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.BooksController.GetBooks(System.Nullable{System.Int64})">
            <summary>
            Получение списка существующих книг.
            </summary>
            <param name="bookId">id книги. Можно использовать для получения конкретной книги.</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.BooksController.RemoveBook(System.Int64)">
            <summary>
            Удаляет книгу.
            </summary>
            <param name="bookId">id книги</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
            <response code="404">Книга не найдена.</response>
            <response code="409">Нельзя удалить книгу, потому что к ней привязаны офферы или отзывы.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.BooksController.SearchBooksByName(System.String)">
            <summary>
            Осущствляет поиск книг по названию.
            </summary>
            <param name="bookTitle">Начало названия книги</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
        </member>
        <member name="T:BooksExchanger.Controllers.ChatController">
            <summary>
            Контроллер чатов.
            </summary>
        </member>
        <member name="M:BooksExchanger.Controllers.ChatController.#ctor(BooksExchanger.Services.Interfaces.IChatService,BooksExchanger.Services.Interfaces.IUserService)">
            <summary>
            Конструктор контроллера.
            </summary>
            <param name="chatService">Сервис чатов.</param>
            <param name="userService">Сервис пользователей.</param>
        </member>
        <member name="M:BooksExchanger.Controllers.ChatController.GetChats">
            <summary>
            Отдает все чаты пользователя.
            </summary>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="401">Пользователь не авторизован.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.ChatController.GetChatWithMessages(System.Int64)">
            <summary>
            Получения конкретного чата вместе с сообщениями.
            Если чата не существует, создается новый.
            </summary>
            <param name="userId">id собеседника</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="404">Получатель не найден.</response>
        </member>
        <member name="T:BooksExchanger.Controllers.FeedbacksConstroller">
            <summary>
            Контроллер отзывов.
            </summary>
        </member>
        <member name="M:BooksExchanger.Controllers.FeedbacksConstroller.#ctor(BooksExchanger.Services.Interfaces.IFeedbackService)">
            <summary>
            Конструктор контроллера.
            </summary>
            <param name="feedbackService">Сервис отзывов.</param>
        </member>
        <member name="M:BooksExchanger.Controllers.FeedbacksConstroller.AddFeedback(System.Guid,BooksExchanger.Controllers.Specs.Offers.AddFeedbackRequest)">
            <summary>
            Добавляет отзыв к офферу или редактирует старый (если отзыв уже есть).
            </summary>
            <param name="offerId">id оффера.</param>
            <param name="request">запрос.</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Не указан ни отзыв, ни оценка.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="404">Не найдено отзыва.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.FeedbacksConstroller.GetFeedbacks(System.Guid)">
            <summary>
            Возвращает все отзывы для заданного оффера.
            Если пользователь авторизирован, то его отзыв возвращается отдельно от остальных.
            </summary>
            <param name="offerId">id оффера.</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.FeedbacksConstroller.RemoveFeedback(System.Int64)">
            <summary>
            Удаляет отзыв.
            </summary>
            <param name="offerId"></param>
            <param name="feedbackId"></param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="404">Не найдено оффера или отзыва.</response>
            <response code="403">Пользователь не является автором отзыва.</response>
        </member>
        <member name="T:BooksExchanger.Controllers.GenresController">
            <summary>
            Контроллер жанров.
            </summary>
        </member>
        <member name="M:BooksExchanger.Controllers.GenresController.#ctor(BooksExchanger.Services.Interfaces.IGenreService)">
            <summary>
            Конструктор контроллера.
            </summary>
            <param name="genreService">Сервис жанров.</param>
        </member>
        <member name="M:BooksExchanger.Controllers.GenresController.CreateGenre(BooksExchanger.Models.Requests.AddGenreRequest)">
            <summary>
            Создает новый жанр.
            </summary>
            <param name="request"></param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
            <response code="409">Жанр с таким именем уже существует.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.GenresController.UpdateGenre(BooksExchanger.Controllers.Specs.Genres.UpdateGenresRequest)">
            <summary>
            Редактирует существующий жанр.
            </summary>
            <param name="request"></param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
            <response code="404">Жанр с таким id не существует.</response>
            <response code="409">Жанр с таким именем уже существует.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.GenresController.GetGenres">
            <summary>
            Возвращает все существующие жанры.
            </summary>
            <param name="request"></param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.GenresController.RemoveGenres(System.Int32)">
            <summary>
            Удаляет жанр.
            </summary>
            <param name="genreId">id жанра</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
            <response code="404">Жанр не найден.</response>
            <response code="409">К жанру привязаны книги.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.GenresController.SearchGenres(System.String)">
            <summary>
            Осуществляет поиск жанров.
            </summary>
            <param name="genreName">Начало названия жанра.</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
        </member>
        <member name="T:BooksExchanger.Controllers.OffersCollectorController">
            <summary>
            Контроллер офферов на модрации.
            </summary>
        </member>
        <member name="M:BooksExchanger.Controllers.OffersCollectorController.#ctor(BooksExchanger.Services.Interfaces.IOffersCollectorService)">
            <summary>
            Конструктор контроллера.
            </summary>
            <param name="offersCollectorService">Сервис офферов на модерации.</param>
        </member>
        <member name="M:BooksExchanger.Controllers.OffersCollectorController.CreateOffer(BooksExchanger.Controllers.Specs.OffersCollector.CreateOfferRequest)">
            <summary>
            Отправляет оффер на модерацию.
            </summary>
            <param name="request"></param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.OffersCollectorController.RejectOffer(BooksExchanger.Controllers.Specs.OffersCollector.RejectOfferRequest)">
            <summary>
            Отклоняет оффер при модерации.
            </summary>
            <param name="request"></param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
            <response code="404">Оффер не найден.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.OffersCollectorController.ApproveOffer(BooksExchanger.Controllers.Specs.OffersCollector.ApproveOfferRequest)">
            <summary>
            Подтверждает оффер при модерации.
            </summary>
            <param name="request"></param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
            <response code="404">Оффер не найден или книга не найдена.</response>
            <response code="409">Оффер уже подтвержден.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.OffersCollectorController.GetOffers(System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>
            Возвращает офферы для модерации.
            </summary>
            <param name="offerId">id оффера, если нужно вернуть конкретный оффер.</param>
            <param name="considerationOnly">Вернуть только офферы, которые ждут модерации.</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.OffersCollectorController.GetRejectedOffers">
            <summary>
            Возвращает отклоненные офферы пользователя.
            </summary>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.OffersCollectorController.GetConsiderationOffers">
            <summary>
            Возвращает офферы пользователя, находящиеся в статусе модерации.
            </summary>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.OffersCollectorController.RemoveOffer(System.Guid)">
            <summary>
            Удаляет оффер, находящийся на модерации.
            </summary>
            <param name="offerId">id оффера</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является владельцем объявления.</response>
            <response code="404">Оффер не найден.</response>
        </member>
        <member name="T:BooksExchanger.Controllers.OffersController">
            <summary>
            Контроллер офферов.
            </summary>
        </member>
        <member name="M:BooksExchanger.Controllers.OffersController.#ctor(BooksExchanger.Services.Interfaces.IOfferService)">
            <summary>
            Конструктор контроллера.
            </summary>
            <param name="offerService">Сервис офферов.</param>
        </member>
        <member name="M:BooksExchanger.Controllers.OffersController.GetOffer(System.Guid)">
            <summary>
            Возвращает оффер по id.
            </summary>
            <param name="offerId">id оффера.</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="404">Оффер не найден.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.OffersController.GetOffers(System.Nullable{System.Int32},System.String,System.Nullable{System.Int64})">
            <summary>
            Возвращает офферы, подходящие под заданные фильтры.
            </summary>
            <param name="genreId">id жанра.</param>
            <param name="city">Название города.</param>
            <param name="userId">id владельца..</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.OffersController.MarkOfferFavorite(System.Guid)">
            <summary>
            Добавляет оффер в избранное пользователя.
            </summary>
            <param name="offerId">id оффера.</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="404">Не найдено оффера.</response>
            <response code="409">Отзыв уже добавлен в избранное.</response>
            <response code="500">Неизвестная ошибка.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.OffersController.RemoveOfferFromFavorite(System.Guid)">
            <summary>
            Удаляет оффер из избранного пользователя.
            </summary>
            <param name="offerId">id оффера.</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="404">Оффер не находится в избранном пользователя.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.OffersController.RemoveOffer(System.Guid)">
            <summary>
            Удаляет оффер.
            </summary>
            <param name="offerId">id оффера</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является владельцем объявления.</response>
            <response code="404">Оффер не найден.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.OffersController.GetFavoriteOffers">
            <summary>
            Получение избранных офферов пользователя.
            </summary>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.OffersController.GetOffersSelections(System.String)">
            <summary>
            Возвращает подборки книг для главной приложения.
            Может фильтровать по городу.
            </summary>
            <param name="city">Название города.</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
        </member>
        <member name="T:BooksExchanger.Controllers.SearchController">
            <summary>
            Контроллер поиска.
            </summary>
        </member>
        <member name="M:BooksExchanger.Controllers.SearchController.#ctor(BooksExchanger.Services.Interfaces.IOfferService)">
            <summary>
            Конструктор контроллера.
            </summary>
            <param name="offerService">Сервис офферов.</param>
        </member>
        <member name="M:BooksExchanger.Controllers.SearchController.SearchByTitle(System.String)">
            <summary>
            Осуществляет поиск офферов по названию книги.
            </summary>
            <param name="title">Начало названия книги.</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.SearchController.SearchByAuthors(System.String)">
            <summary>
            Осуществляет поиск офферов по авторам.
            </summary>
            <param name="title">Начало имени автора.</param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Authors.CreateAuthorRequest">
            <summary>
            Запрос на создание автора.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Authors.CreateAuthorRequest.Name">
            <summary>
            ФИО автора
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Authors.CreateAuthorResponse">
            <summary>
            Модель ответа для создания автора.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Authors.CreateAuthorResponse.Id">
            <summary>
            Id созданного автора.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Authors.GetAuthorsResponse">
            <summary>
            Модель ответа для получения авторов.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Authors.GetAuthorsResponse.Authors">
            <summary>
            Список авторов.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Authors.UpdateAuthorRequest">
            <summary>
            Модель запроса для редактирования автора.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Authors.UpdateAuthorRequest.Id">
            <summary>
            Id автора.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Authors.UpdateAuthorRequest.NewName">
            <summary>
            Новое ФИО для автора.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Authors.UpdateAuthorResponse">
            <summary>
            Модель ответа для редактирования автора.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Authors.UpdateAuthorResponse.Id">
            <summary>
            Id автора.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Books.CreateBookRequest">
            <summary>
            Модель запроса для создания книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Books.CreateBookRequest.Title">
            <summary>
            Название книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Books.CreateBookRequest.GenreId">
            <summary>
            id жанра.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Books.CreateBookRequest.AuthorIds">
            <summary>
            id авторов книг.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Books.CreateBookResponse">
            <summary>
            Модель ответа создания книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Books.CreateBookResponse.Id">
            <summary>
            Id книги.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Books.GetBooksResponse">
            <summary>
            Модель запроса для получения книг.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Books.GetBooksResponse.Books">
            <summary>
            Информация о запрашиваемых книгах.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Books.UpdateBookRequest">
            <summary>
            Модель запроса для редактирования книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Books.UpdateBookRequest.BookId">
            <summary>
            Id книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Books.UpdateBookRequest.Title">
            <summary>
            Название книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Books.UpdateBookRequest.GenreId">
            <summary>
            Id жанра.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Books.UpdateBookRequest.AuthorIds">
            <summary>
            id авторов.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Books.UpdateBookResponse">
            <summary>
            Модель ответа редактирования книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Books.UpdateBookResponse.Id">
            <summary>
            Id книги.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Chats.GetChatResponse">
            <summary>
            Модель ответа получения чата.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Chats.GetChatResponse.ChatId">
            <summary>
            id чата.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Chats.GetChatResponse.UserName">
            <summary>
            Имя собеседника
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Chats.GetChatResponse.UserId">
            <summary>
            Id собеседника
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Chats.GetChatResponse.Messages">
            <summary>
            Сообщения.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Chats.GetChatsResponse">
            <summary>
            Модель ответа получения чатов.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Chats.GetChatsResponse.Chats">
            <summary>
            Информация о чатах.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Common.Author">
            <summary>
            Модель автора.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Author.Id">
            <summary>
            id автора.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Author.Name">
            <summary>
            ФИО автора.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Common.Book">
            <summary>
            Модель книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Book.Id">
            <summary>
            id книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Book.Title">
            <summary>
            Название книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Book.Genre">
            <summary>
            Жанр книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Book.Authors">
            <summary>
            Информаиця об авторах книги.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Common.Chat">
            <summary>
            Модель чата.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Chat.Id">
            <summary>
            Id чата.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Chat.UserName">
            <summary>
            Имя собеседника.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Chat.LastMessage">
            <summary>
            Последнее отправленное сообщение.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Chat.UserId">
            <summary>
            id собеседника.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Common.Feedback">
            <summary>
            Модель отзыва.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Feedback.Id">
            <summary>
            id отзыва.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Feedback.UserName">
            <summary>
            Имя автора отзыва.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Feedback.CreatedAt">
            <summary>
            Дата и время создания отзыва.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Feedback.Value">
            <summary>
            Текс отзыва.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Feedback.Estimation">
            <summary>
            Оценка книги по мнению пользователя (от 1 до 5).
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Common.Genre">
            <summary>
            Модель жанра.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Genre.Id">
            <summary>
            id жанра.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Genre.Name">
            <summary>
            Наименование жанра.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Common.Message">
            <summary>
            Модель сообщения.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Message.Id">
            <summary>
            Id 
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Message.Text">
            <summary>
            Текс сообщения.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Message.IsUserSender">
            <summary>
            Флаг, что это сообщение текущего пользователя (для окрашивания сообщений разными цветами)
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Message.UserId">
            <summary>
            Id автора сообщения
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Message.SentAt">
            <summary>
            Дата и время отправки сообщения
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Common.ModerationStatus">
            <summary>
            Модель статусов модерации оффера.
            </summary>
        </member>
        <member name="F:BooksExchanger.Controllers.Specs.Common.ModerationStatus.Submitted">
            <summary>
            Отправлен.
            </summary>
        </member>
        <member name="F:BooksExchanger.Controllers.Specs.Common.ModerationStatus.Consideration">
            <summary>
            На рассмотрении.
            </summary>
        </member>
        <member name="F:BooksExchanger.Controllers.Specs.Common.ModerationStatus.Approved">
            <summary>
            Подтвержден.
            </summary>
        </member>
        <member name="F:BooksExchanger.Controllers.Specs.Common.ModerationStatus.Rejected">
            <summary>
            Отклонен.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Common.Offer">
            <summary>
            Модель оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Offer.Id">
            <summary>
            id оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Offer.Title">
            <summary>
            Название книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Offer.Description">
            <summary>
            Описание оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Offer.Price">
            <summary>
            Цена.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Offer.City">
            <summary>
            Город.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Offer.Picture">
            <summary>
            Загрузочная ссылка на картинку.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Offer.Genre">
            <summary>
            Информация о жанре.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Offer.Authors">
            <summary>
            Список авторов.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Offer.Owner">
            <summary>
            Информация о владельце.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Offer.CreatedAt">
            <summary>
            Дата и время создания.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Offer.BookRating">
            <summary>
            Рейтинг книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Offer.IsFavoriteForUser">
            <summary>
            Находится ли оффер в избранном пользователя (чтобы отобрадажать это).
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Common.OfferCollector">
            <summary>
            Модель оффера на модерации.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.OfferCollector.Id">
            <summary>
            Id оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.OfferCollector.Title">
            <summary>
            Название книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.OfferCollector.Description">
            <summary>
            Описание оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.OfferCollector.Owner">
            <summary>
            Информация о владельце.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.OfferCollector.Authors">
            <summary>
            Информация об авторах.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.OfferCollector.Price">
            <summary>
            Цена.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.OfferCollector.ModerationStatus">
            <summary>
            Статус модерации
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.OfferCollector.City">
            <summary>
            Город публикации.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.OfferCollector.Picture">
            <summary>
            Ссылка на картинку.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.OfferCollector.CreatedAt">
            <summary>
            Дата и время создания.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.OfferCollector.RegectReason">
            <summary>
            Причина отказа (при наличии).
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Common.Owner">
            <summary>
            Модель владельца объявления.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Owner.Id">
            <summary>
            id пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Owner.Name">
            <summary>
            Имя пользователя.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Common.Selection">
            <summary>
            Подель книжной подборки.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Selection.Title">
            <summary>
            Название подборки.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Common.Selection.Offers">
            <summary>
            Офферы.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.ErrorResponse">
            <summary>
            Модель ответа с ошибкой.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.ErrorResponse.Message">
            <summary>
            Сообщение об ошибке.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Genres.CreateUpdateGenreResponse">
            <summary>
            Модель ответа создания или редактирования жанра.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Genres.CreateUpdateGenreResponse.Id">
            <summary>
            Id жанра.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Genres.GetGenresResponse">
            <summary>
            Модель ответа получения жанров.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Genres.GetGenresResponse.Genres">
            <summary>
            Информация о жанрах.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Genres.UpdateGenresRequest">
            <summary>
            Модель запроса на редактирование жанра.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Genres.UpdateGenresRequest.Id">
            <summary>
            id жанра
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Genres.UpdateGenresRequest.Name">
            <summary>
            Новое название жанра.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Offers.AddFeedbackReponse">
            <summary>
            Модель ответа добавления отзыва.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Offers.AddFeedbackReponse.Id">
            <summary>
            id созданного отзыва.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Offers.AddFeedbackRequest">
            <summary>
            Модель запроса на добавление отзыва.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Offers.AddFeedbackRequest.Estimation">
            <summary>
            Оценка книги от 1 до 5.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Offers.AddFeedbackRequest.Feedback">
            <summary>
            Текстовый отзыв пользователя на книгу.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Offers.GetFeedbacksResponse">
            <summary>
            Модель ответа получения отзывов.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Offers.GetFeedbacksResponse.UserFeedback">
            <summary>
            Отзыв пользователя (если есть).
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Offers.GetFeedbacksResponse.Feedbacks">
            <summary>
            Отзыв других пользователей.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Offers.GetOfferResponse">
            <summary>
            Модель ответа получения оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Offers.GetOfferResponse.Offer">
            <summary>
            Информация об оффере.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Offers.GetOffersResponse">
            <summary>
            Модель ответа получения офферов.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Offers.GetOffersResponse.Offers">
            <summary>
            Информация об офферах.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.Offers.GetOffersSelectionsResponse">
            <summary>
            Модель ответа получения книжных подборок.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.Offers.GetOffersSelectionsResponse.Selections">
            <summary>
            Подборки книг.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.OffersCollector.ApproveOfferRequest">
            <summary>
            Модель запроса подтверждения оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.OffersCollector.ApproveOfferRequest.OfferId">
            <summary>
            Id оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.OffersCollector.ApproveOfferRequest.LinkedBookId">
            <summary>
            Привязанная к офферу книга.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.OffersCollector.ApproveOfferResponse">
            <summary>
            Модель ответа подтверждения оффера.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.OffersCollector.CreateOfferRequest">
            <summary>
            Модель запроса на создание оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.OffersCollector.CreateOfferRequest.Title">
            <summary>
            Название книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.OffersCollector.CreateOfferRequest.Description">
            <summary>
            Описание оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.OffersCollector.CreateOfferRequest.Authors">
            <summary>
            Авторы книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.OffersCollector.CreateOfferRequest.Price">
            <summary>
            Цена.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.OffersCollector.CreateOfferRequest.City">
            <summary>
            Город, в котором выкладывается объявление.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.OffersCollector.CreateOfferRequest.Image">
            <summary>
            Фотография книги.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.OffersCollector.CreateOfferResponse">
            <summary>
            Модель ответа создания оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.OffersCollector.CreateOfferResponse.Id">
            <summary>
            Id jффера.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.OffersCollector.GetOffersCollectorResponse">
            <summary>
            Модель ответа получения офферов, находящихся на модерации.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.OffersCollector.GetOffersCollectorResponse.Offers">
            <summary>
            Информация об офферах.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.OffersCollector.RejectOfferRequest">
            <summary>
            Модель запроса на отклонение оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.OffersCollector.RejectOfferRequest.Id">
            <summary>
            Id оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.OffersCollector.RejectOfferRequest.RejectReason">
            <summary>
            Причина отказа.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.OffersCollector.RejectOfferResponse">
            <summary>
            Модель ответа на отклонение оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.OffersCollector.RejectOfferResponse.Id">
            <summary>
            Id оффера
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.User.RegisterUserRequest">
            <summary>
            Модель запроса на регистрацию пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.User.RegisterUserRequest.Email">
            <summary>
            email пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.User.RegisterUserRequest.Name">
            <summary>
            Имя пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.User.RegisterUserRequest.Password">
            <summary>
            Пароль пользователя.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.User.SetNewAdminRequest">
            <summary>
            Модель запроса на добавление администратора.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.User.SetNewAdminRequest.Email">
            <summary>
            email пользователя.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.Specs.User.VerifyUserRequest">
            <summary>
            Модель запроса на верификацию пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.User.VerifyUserRequest.Email">
            <summary>
            Почта пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Controllers.Specs.User.VerifyUserRequest.Code">
            <summary>
            Код подтверждения.
            </summary>
        </member>
        <member name="T:BooksExchanger.Controllers.UserController">
            <summary>
            Контроллер пользователей.
            </summary>
        </member>
        <member name="M:BooksExchanger.Controllers.UserController.#cctor">
            <summary>
            Статический конструктор контроллера.
            </summary>
        </member>
        <member name="M:BooksExchanger.Controllers.UserController.#ctor(BooksExchanger.Services.Interfaces.IUserService)">
            <summary>
            Конструктор контроллера.
            </summary>
            <param name="userService">Сервис пользователей.</param>
        </member>
        <member name="M:BooksExchanger.Controllers.UserController.AuthorizeUser(BooksExchanger.Models.Requests.AuthRequest)">
            <summary>
            Выдает токен авторизации.
            </summary>
            <param name="request"></param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="404">Неправильная почта или пароль.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.UserController.RegisterUser(BooksExchanger.Controllers.Specs.User.RegisterUserRequest)">
            <summary>
            Осуществляет отправку кода подтверждения.
            </summary>
            <param name="request"></param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="409">Пользователь с такой почтой уже зарегистрирован.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.UserController.VerifyrUser(BooksExchanger.Controllers.Specs.User.VerifyUserRequest)">
            <summary>
            Осуществляет подтверждение почты пользователя и регистрирует его.
            </summary>
            <param name="request"></param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="403">Неверный код подтверждения.</response>
            <response code="404">Пользователь не запрашивал код на почту или прошло силком много времени.</response>
            <response code="409">Пользователь с такой почтой уже зарегистрирован.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.UserController.SetAdmin(BooksExchanger.Controllers.Specs.User.SetNewAdminRequest)">
            <summary>
            Позволяет назначить пользователя админом.
            </summary>
            <param name="request"></param>
            <returns></returns>
            <response code="200">Успешное выполнение.</response>
            <response code="400">Неверный формат запроса.</response>
            <response code="401">Пользователь не авторизован.</response>
            <response code="403">Пользователь не является админом.</response>
            <response code="404">Пользователь с такой почтой не существует.</response>
            <response code="409">Пользователь уже является админом.</response>
        </member>
        <member name="M:BooksExchanger.Controllers.UserController.CheckToken">
            <summary>
            Проверяет авторизацию пользователя.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Middlewares.JwtMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{BooksExchanger.Settings.AppSettings})">
            <summary>
            Конструктор мидлвари авторизации.
            </summary>
            <param name="next"></param>
            <param name="appSettings"></param>
        </member>
        <member name="M:BooksExchanger.Middlewares.JwtMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Добавляет информацию о пользователе в контекст запроса.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:BooksExchanger.Models.Requests.AddGenreRequest">
            <summary>
            Модель запроса создания жанра.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Requests.AddGenreRequest.Name">
            <summary>
            Название жанра.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.Requests.AuthRequest">
            <summary>
            Модель запроса на авторизацию пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Requests.AuthRequest.Email">
            <summary>
            email пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Requests.AuthRequest.Password">
            <summary>
            Пароль пользователя.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.Requests.AuthResponse">
            <summary>
            Модель ответа на авторизацию пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Requests.AuthResponse.Token">
            <summary>
            Токен авторизации.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.PasswordHasher">
            <summary>
            Класс для хеширования паролей.
            </summary>
        </member>
        <member name="M:BooksExchanger.Models.PasswordHasher.HashPassword(System.String)">
            <summary>
            Хеширует пароль.
            </summary>
            <param name="password">Пароль.</param>
            <returns>Захешированный пароль.</returns>
        </member>
        <member name="T:BooksExchanger.Models.ResponseMapper">
            <summary>
            Класс-маппер моделей.
            </summary>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapAuthor(BooksExchanger.Models.Author)">
            <summary>
            Маппит модели автора.
            </summary>
            <param name="author"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapAuthor(BooksExchanger.Entities.Author)">
            <summary>
            Маппит модели автора.
            </summary>
            <param name="author"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapModerationStatus(BooksExchanger.Models.ModerationStatus)">
            <summary>
            Маппит модели статуса модерации.
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapModerationStatus(BooksExchanger.Entities.ModerationStatus)">
            <summary>
            Маппит модели статуса модерации.
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapModerationStatusToDb(BooksExchanger.Models.ModerationStatus)">
            <summary>
            Маппит модели статуса модерации.
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapOfferCollector(BooksExchanger.Models.OfferCollector)">
            <summary>
            Маппит модели офферов на модерации.
            </summary>
            <param name="offerCollector"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapOfferCollector(BooksExchanger.Entities.OffersCollector)">
            <summary>
            Маппит модели офферов на модерации.
            </summary>
            <param name="offersCollector"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapChatWithMessages(BooksExchanger.Entities.Chat,System.Int64)">
            <summary>
            Маппит модели чатов.
            </summary>
            <param name="chat"></param>
            <param name="currentUserId"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapMessage(BooksExchanger.Models.Message,System.Int64)">
            <summary>
            Маппит модели сообщений.
            </summary>
            <param name="message"></param>
            <param name="currentUserId"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapMessage(BooksExchanger.Entities.Message)">
            <summary>
            Маппит модели сообщений.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapChat(BooksExchanger.Models.Chat)">
            <summary>
            Маппит модели чатов.
            </summary>
            <param name="chat"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapChat(BooksExchanger.Entities.Chat,System.Int64)">
            <summary>
            Маппит модели чатов.
            </summary>
            <param name="chat"></param>
            <param name="currentUserId"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapGenre(BooksExchanger.Models.Genre)">
            <summary>
            Маппит модели жанров.
            </summary>
            <param name="genre"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapGenre(BooksExchanger.Entities.Genre)">
            <summary>
            Маппит модели жанров.
            </summary>
            <param name="genre"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapOwner(BooksExchanger.Models.Owner)">
            <summary>
            Маппит модели владельца.
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapOwner(BooksExchanger.Entities.User)">
            <summary>
            Маппит модели владельца.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapOffer(BooksExchanger.Models.Offer)">
            <summary>
            Маппит модели офферов.
            </summary>
            <param name="offer"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapOffer(BooksExchanger.Models.Offer,System.Boolean)">
            <summary>
            Маппит модели офферов.
            </summary>
            <param name="offer"></param>
            <param name="isFavorite"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapOffer(BooksExchanger.Entities.Offer)">
            <summary>
            Маппит модели офферов.
            </summary>
            <param name="offer"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapBook(BooksExchanger.Models.Book)">
            <summary>
            Маппит модели книг.
            </summary>
            <param name="book"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapBook(BooksExchanger.Entities.Book)">
            <summary>
            Маппит модели книг.
            </summary>
            <param name="book"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapSelection(BooksExchanger.Models.Selection)">
            <summary>
            Маппит модели подборок.
            </summary>
            <param name="selection"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapFeedback(BooksExchanger.Models.Feedback)">
            <summary>
            Маппит модели отзывов.
            </summary>
            <param name="feedback"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapFeedback(BooksExchanger.Entities.Feedback,BooksExchanger.Models.BookEstimation)">
            <summary>
            Маппит модели отзывов.
            </summary>
            <param name="feedback"></param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Models.ResponseMapper.MapUser(BooksExchanger.Entities.User)">
            <summary>
            Маппит модели юзеров.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:BooksExchanger.Models.Author">
            <summary>
            Модель автора.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Author.Id">
            <summary>
            id автора.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Author.Name">
            <summary>
            ФИО автора.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.AuthUser">
            <summary>
            Модель авторизированного пользорвателя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.AuthUser.Id">
            <summary>
            Id пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.AuthUser.Role">
            <summary>
            Роль пользователя.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.Book">
            <summary>
            Модель книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Book.Id">
            <summary>
            id книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Book.Title">
            <summary>
            Название книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Book.Genre">
            <summary>
            Жанр книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Book.Authors">
            <summary>
            Информаиця об авторах книги.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.BookEstimation">
            <summary>
            Модель рейтинга книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.BookEstimation.CountRating">
            <summary>
            Количество оценок.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.BookEstimation.SumRating">
            <summary>
            Сумма оценок.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.Chat">
            <summary>
            Модель чата.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Chat.Id">
            <summary>
            Id чата.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Chat.UserName">
            <summary>
            Имя собеседника.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Chat.LastMessage">
            <summary>
            Последнее отправленное сообщение.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Chat.UserId">
            <summary>
            id собеседника.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.ChatWithMessages">
            <summary>
            Модель чата с сообщениями.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.ChatWithMessages.Id">
            <summary>
            Id чата.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.ChatWithMessages.UserName">
            <summary>
            Имя собеседника.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.ChatWithMessages.UserId">
            <summary>
            id собеседника.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.ChatWithMessages.Messages">
            <summary>
            Сообщения.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.Constants">
            <summary>
            Класс, содержащий константы.
            </summary>
        </member>
        <member name="F:BooksExchanger.Models.Constants.BooksGenreFK">
            <summary>
            Внешний ключ книги к жанру.
            </summary>
        </member>
        <member name="F:BooksExchanger.Models.Constants.AuthorsBooksAuthorIdFK">
            <summary>
            Внешний ключ книги к авторам.
            </summary>
        </member>
        <member name="F:BooksExchanger.Models.Constants.OffersUsersPK">
            <summary>
            Внешний ключ оффера к пользователю.
            </summary>
        </member>
        <member name="F:BooksExchanger.Models.Constants.GenresNameKey">
            <summary>
            Уникальное имя в жанрах.
            </summary>
        </member>
        <member name="F:BooksExchanger.Models.Constants.FeedbacksBookIdFK">
            <summary>
            Внешний ключ отзыва к книге.
            </summary>
        </member>
        <member name="F:BooksExchanger.Models.Constants.OffersBookIdFK">
            <summary>
            Внешний ключ оффера к книге.
            </summary>
        </member>
        <member name="F:BooksExchanger.Models.Constants.MaxOffersInSelection">
            <summary>
            Максимальное количество офферов в подборке.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.Feedback">
            <summary>
            Модель отзыва.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Feedback.Id">
            <summary>
            Id отзыва.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Feedback.Text">
            <summary>
            Текст отзыва.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Feedback.GivenByUserId">
            <summary>
            Id автора отзыва.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Feedback.Estimation">
            <summary>
            Оценка книги пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Feedback.UserName">
            <summary>
            Имя автора.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Feedback.BookEstimation">
            <summary>
            Оценка книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Feedback.CreatedAt">
            <summary>
            Дата и время создания отзыва.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.Genre">
            <summary>
            Модель жанра.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Genre.Id">
            <summary>
            id жанра.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Genre.Name">
            <summary>
            Наименование жанра.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.Message">
            <summary>
            Модель сообщения.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Message.Id">
            <summary>
            Id 
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Message.Text">
            <summary>
            Текс сообщения.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Message.UserId">
            <summary>
            Id автора сообщения
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Message.SentAt">
            <summary>
            Дата и время отправки сообщения
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.ModerationStatus">
            <summary>
            Статус модерации.
            </summary>
        </member>
        <member name="F:BooksExchanger.Models.ModerationStatus.Submitted">
            <summary>
            Отправлен.
            </summary>
        </member>
        <member name="F:BooksExchanger.Models.ModerationStatus.Consideration">
            <summary>
            На рассмотрении.
            </summary>
        </member>
        <member name="F:BooksExchanger.Models.ModerationStatus.Approved">
            <summary>
            Подтвержден.
            </summary>
        </member>
        <member name="F:BooksExchanger.Models.ModerationStatus.Rejected">
            <summary>
            Отклонен.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.Offer">
            <summary>
            Модель оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Offer.Id">
            <summary>
            id оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Offer.Title">
            <summary>
            Название книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Offer.Description">
            <summary>
            Описание оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Offer.Price">
            <summary>
            Цена.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Offer.City">
            <summary>
            Город.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Offer.Picture">
            <summary>
            Загрузочная ссылка на картинку.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Offer.Genre">
            <summary>
            Информация о жанре.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Offer.Authors">
            <summary>
            Список авторов.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Offer.Owner">
            <summary>
            Информация о владельце.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Offer.CreatedAt">
            <summary>
            Дата и время создания.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Offer.BookRating">
            <summary>
            Рейтинг книги.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.OfferCollector">
            <summary>
            Модель оффера на модерации.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.OfferCollector.Id">
            <summary>
            Id оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.OfferCollector.Title">
            <summary>
            Название книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.OfferCollector.Description">
            <summary>
            Описание оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.OfferCollector.Owner">
            <summary>
            Информация о владельце.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.OfferCollector.Authors">
            <summary>
            Информация об авторах.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.OfferCollector.Price">
            <summary>
            Цена.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.OfferCollector.ModerationStatus">
            <summary>
            Статус модерации
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.OfferCollector.City">
            <summary>
            Город публикации.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.OfferCollector.Picture">
            <summary>
            Ссылка на картинку.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.OfferCollector.CreatedAt">
            <summary>
            Дата и время создания.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.OfferCollector.RegectReason">
            <summary>
            Причина отказа (при наличии).
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.Owner">
            <summary>
            Модель автора.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Owner.Id">
            <summary>
            id пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Owner.Name">
            <summary>
            Имя пользователя.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.RecieveMessage">
            <summary>
            Модель сообщения для получения.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.RecieveMessage.ChatId">
            <summary>
            Id чата.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.RecieveMessage.MessageId">
            <summary>
            Id сообщения.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.RecieveMessage.Text">
            <summary>
            Текст сообщения.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.RecieveMessage.Time">
            <summary>
            Дата и время сообщения.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.Selection">
            <summary>
            Модель книжной подборки.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Selection.Title">
            <summary>
            Название подборки.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.Selection.Offers">
            <summary>
            Офферы.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.SendMessage">
            <summary>
            Модель сообщения для отправки.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.SendMessage.ToUserId">
            <summary>
            Id получателя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.SendMessage.Text">
            <summary>
            Текс сообщения.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.ShortUserInfo">
            <summary>
            Краткая информация о пользователе.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.ShortUserInfo.Email">
            <summary>
            email пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.ShortUserInfo.Password">
            <summary>
            Пароль пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.ShortUserInfo.Name">
            <summary>
            Имя пользователя.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.User">
            <summary>
            Модель пользовтаеля.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.User.Id">
            <summary>
            id пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.User.Email">
            <summary>
            email пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.User.Password">
            <summary>
            Пароль пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.User.Name">
            <summary>
            Имя пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Models.User.Role">
            <summary>
            Роль пользоватля.
            </summary>
        </member>
        <member name="T:BooksExchanger.Models.UserRole">
            <summary>
            Модель ролей пользователя.
            </summary>
        </member>
        <member name="F:BooksExchanger.Models.UserRole.User">
            <summary>
            Обычный пользователь.
            </summary>
        </member>
        <member name="F:BooksExchanger.Models.UserRole.Admin">
            <summary>
            Администратор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Repositories.Exeptions.AuthorNotFoundException">
            <summary>
            Автор не найден.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.AuthorNotFoundException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.AuthorNotFoundException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.AuthorNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Repositories.Exeptions.BookNotFoundException">
            <summary>
            Книга не найдена.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.BookNotFoundException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.BookNotFoundException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.BookNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Repositories.Exeptions.GenreAlreadyExistsException">
            <summary>
            Жанр уже существует.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.GenreAlreadyExistsException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.GenreAlreadyExistsException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.GenreAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Repositories.Exeptions.GenreNotFoundException">
            <summary>
            Жанр не найден.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.GenreNotFoundException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.GenreNotFoundException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.GenreNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Repositories.Exeptions.OfferAlreadyApprovedException">
            <summary>
            Оффер уже подтвержден.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.OfferAlreadyApprovedException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.OfferAlreadyApprovedException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.OfferAlreadyApprovedException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Repositories.Exeptions.OfferAlreadyFavoriteException">
            <summary>
            Оффер уже находистя в избранном.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.OfferAlreadyFavoriteException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.OfferAlreadyFavoriteException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.OfferAlreadyFavoriteException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Repositories.Exeptions.OfferAlreadyNotInFavoritesException">
            <summary>
            Оффер не находистя в избранном пользвоателя.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.OfferAlreadyNotInFavoritesException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.OfferAlreadyNotInFavoritesException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.OfferAlreadyNotInFavoritesException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Repositories.Exeptions.OfferNotFoundException">
            <summary>
            Оффер не найден.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.OfferNotFoundException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.OfferNotFoundException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.OfferNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Repositories.Exeptions.RemoveAuthorNotAllowedException">
            <summary>
            Нельзя удалить автора.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.RemoveAuthorNotAllowedException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.RemoveAuthorNotAllowedException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.RemoveAuthorNotAllowedException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Repositories.Exeptions.RemoveBookNotAllowedException">
            <summary>
            Удалить книгу невозможно.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.RemoveBookNotAllowedException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.RemoveBookNotAllowedException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.RemoveBookNotAllowedException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Repositories.Exeptions.RemoveGenreNotAllowedException">
            <summary>
            Нельзя удалить жанр.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.RemoveGenreNotAllowedException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.RemoveGenreNotAllowedException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.RemoveGenreNotAllowedException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Repositories.Exeptions.UserAlreadyExistException">
            <summary>
            Пользователь уже существует.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.UserAlreadyExistException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.UserAlreadyExistException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.UserAlreadyExistException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Repositories.Exeptions.UserNotFoundException">
            <summary>
            Пользователь не найден.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.UserNotFoundException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.UserNotFoundException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Exeptions.UserNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Repositories.Implementations.AuthorRepository">
            <summary>
            Хранилице авторов.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.AuthorRepository.#ctor">
            <summary>
            Конструктор хранилища авторов.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.AuthorRepository.InsertAuthor(System.String)">
            <summary>
            Добавление автора.
            </summary>
            <param name="name">Имя автора.</param>
            <returns>id атора.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.AuthorRepository.UpdateAuthor(System.Int64,System.String)">
            <summary>
            Обновляет автора по id.
            </summary>
            <param name="id">id автора.</param>
            <param name="name">Имя автора.</param>
            <returns>id автора.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.AuthorRepository.GetAuthors">
            <summary>
            Получение авторов.
            </summary>
            <returns>Авторы.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.AuthorRepository.GetAuthors(System.Func{System.String,System.Boolean})">
            <summary>
            Получение авторов с фильтрами.
            </summary>
            <param name="filter">Фильтры.</param>
            <returns>Авторы.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.AuthorRepository.RemoveAuthor(System.Int64)">
            <summary>
            Удаление автора по id.
            </summary>
            <param name="id">id автора.</param>
        </member>
        <member name="T:BooksExchanger.Repositories.Implementations.BookRepository">
            <summary>
            Хранилище книг.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.BookRepository.#ctor">
            <summary>
            Конструктор хранилища книг.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.BookRepository.InsertBook(System.String,System.Int32,System.Collections.Generic.List{System.Int64})">
            <summary>
            Добавляет новую книгу.
            </summary>
            <param name="title">Название книги.</param>
            <param name="genreId">Жанр.</param>
            <param name="authorIds">Авторы.</param>
            <returns>id книги.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.BookRepository.UpdateBook(System.Int64,System.String,System.Int32,System.Collections.Generic.List{System.Int64})">
            <summary>
            Обновляет книгу.
            </summary>
            <param name="bookId">Книга.</param>
            <param name="title">Заголовок.</param>
            <param name="genreId">Жанр.</param>
            <param name="authorIds">Авторы.</param>
            <returns>id книги.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.BookRepository.GetBooks(System.Func{System.Int64,System.Boolean})">
            <summary>
            Получение книг.
            </summary>
            <param name="filter">Фильтр.</param>
            <returns>Книги.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.BookRepository.GetBooks(System.Func{System.String,System.Boolean})">
            <summary>
            Получение книг.
            </summary>
            <param name="filter">Фильтр.</param>
            <returns>Книги.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.BookRepository.RemoveBook(System.Int64)">
            <summary>
            Удаление книги по id.
            </summary>
            <param name="bookId">Книга.</param>
        </member>
        <member name="T:BooksExchanger.Repositories.Implementations.ChatRepository">
            <summary>
            Хранилище чатов.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.ChatRepository.#ctor">
            <summary>
            Конструктор хранилища чатов.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.ChatRepository.GetChats(System.Int64,System.Boolean)">
            <summary>
            Получение чатов.
            </summary>
            <param name="userId">Юзер.</param>
            <param name="needOrderMessagesByDescending">Нужно ли сортировать сообщения.</param>
            <returns>Чаты.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.ChatRepository.AddMessage(System.Int64,System.Int64,System.String)">
            <summary>
            Добавляет сообщение.
            </summary>
            <param name="senderId">Отправитель.</param>
            <param name="chatId">Чат.</param>
            <param name="text">Сообщение.</param>
            <returns>id сообщения.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.ChatRepository.GetChatWithMessages(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Получение чата с сообщениями.
            </summary>
            <param name="currentUserId">Текущий пользователь.</param>
            <param name="secondUserId">Собеседник.</param>
            <param name="needOrderMessagesByDescending">Нужно ли сортировать сообщения.</param>
            <returns>Чат с ссобщениями.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.ChatRepository.CreateChatWithMessages(System.Int64,System.Int64)">
            <summary>
            Создать чат с сообщениями.
            </summary>
            <param name="currentUserId">Текущий пользователь.</param>
            <param name="secondUserId">Собеседник.</param>
            <returns>Чат с сообщениями.</returns>
        </member>
        <member name="T:BooksExchanger.Repositories.Implementations.FeedbackRepository">
            <summary>
            Хранилище отзывов.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.FeedbackRepository.#ctor">
            <summary>
            Конструктор хранилища отзывов.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.FeedbackRepository.UpdateFeedback(System.Int64,System.Guid,System.String,System.Nullable{System.Int32},BooksExchanger.Models.BookEstimation)">
            <summary>
            Добавляет или обновляет отзыв.
            </summary>
            <param name="authorId"></param>
            <param name="offerId"></param>
            <param name="text"></param>
            <param name="estimation"></param>
            <param name="bookEstimation"></param>
            <returns></returns>
            <exception cref="T:BooksExchanger.Repositories.Exeptions.OfferNotFoundException"></exception>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.FeedbackRepository.InsertFeedback(System.Int64,System.Guid,System.String,System.Nullable{System.Int32})">
            <summary>
            Добавляет новый отзыв.
            </summary>
            <param name="authorId">Автор отзыва.</param>
            <param name="offerId">id оффера.</param>
            <param name="text">Текст отзыва.</param>
            <param name="estimation">Оценка книги.</param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.FeedbackRepository.GetFeedback(System.Guid,System.Int64)">
            <summary>
            Получает отзыв.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="authorId">Идентификатор автора отзыва.</param>
            <returns>Отзыв или null, если отзыв не найден.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.FeedbackRepository.GetFeedback(System.Int64)">
            <summary>
            Получает отзыв по идентификатору.
            </summary>
            <param name="feedbackId">Идентификатор отзыва.</param>
            <returns>Отзыв или null, если отзыв не найден.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.FeedbackRepository.RemoveFeedback(System.Int64)">
            <summary>
            Удаляет отзыв.
            </summary>
            <param name="feedbackId">Идентификатор отзыва.</param>
            <returns>True, если отзыв успешно удалён, иначе False.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.FeedbackRepository.GetFeedbacks(System.Guid)">
            <summary>
            Получает отзывы оффера.
            </summary>
            <param name="offerId">id оффера.</param>
            <returns>Все отзывы оффера.</returns>
        </member>
        <member name="T:BooksExchanger.Repositories.Implementations.GenreRepository">
            <summary>
            Репозиторий для управления жанрами в базе данных.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.GenreRepository.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:BooksExchanger.Repositories.Implementations.GenreRepository"/>.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.GenreRepository.InsertGenre(System.String)">
            <summary>
            Вставляет новый жанр в базу данных.
            </summary>
            <param name="name">Название жанра для вставки.</param>
            <returns>Сгенерированный идентификатор для вставленного жанра.</returns>
            <exception cref="T:BooksExchanger.Repositories.Exeptions.GenreAlreadyExistsException">Исключение, возникающее, когда жанр с таким именем уже существует.</exception>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.GenreRepository.UpdateGenre(System.Int32,System.String)">
            <summary>
            Обновляет название существующего жанра в базе данных.
            </summary>
            <param name="id">Идентификатор жанра для обновления.</param>
            <param name="name">Новое название для жанра.</param>
            <returns>Идентификатор обновленного жанра.</returns>
            <exception cref="T:BooksExchanger.Repositories.Exeptions.GenreNotFoundException">Исключение, возникающее, когда жанр с указанным идентификатором не существует.</exception>
            <exception cref="T:BooksExchanger.Repositories.Exeptions.GenreAlreadyExistsException">Исключение, возникающее, когда жанр с обновленным названием уже существует.</exception>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.GenreRepository.GetGenres">
            <summary>
            Извлекает коллекцию всех жанров из базы данных.
            </summary>
            <returns>Коллекция <see cref="T:BooksExchanger.Models.Genre"/>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BooksExchanger.Repositories.Implementations.GenreRepository.GetGenres(System.Func{System.String,System.Boolean})" -->
        <member name="M:BooksExchanger.Repositories.Implementations.GenreRepository.RemoveGenre(System.Int32)">
            <summary>
            Удаляет жанр из базы данных.
            </summary>
            <param name="id">Идентификатор удаляемого жанра.</param>
            <exception cref="T:BooksExchanger.Repositories.Exeptions.GenreNotFoundException">Исключение, возникающее, когда жанр с указанным идентификатором не существует.</exception>
            <exception cref="T:BooksExchanger.Repositories.Exeptions.RemoveGenreNotAllowedException">Исключение, возникающее, когда невозможно удалить жанр, поскольку к нему привязаны книги.</exception>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OfferRepository.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:BooksExchanger.Repositories.Implementations.OfferRepository"/>.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OfferRepository.GetOffer(System.Guid)">
            <summary>
            Получает предложение по его уникальному идентификатору.
            </summary>
            <param name="offerId">Уникальный идентификатор предложения.</param>
            <returns>Найденное предложение.</returns>
            <exception cref="T:BooksExchanger.Repositories.Exeptions.OfferNotFoundException">Исключение выбрасывается, если предложение с указанным ID не найдено.</exception>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OfferRepository.IsFavoriteForUser(System.Int64,System.Guid)">
            <summary>
            Определяет, добавлено ли предложение в избранные у пользователя.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <param name="offerId">Идентификатор предложения.</param>
            <returns>Возвращает true, если предложение находится в избранных у пользователя, иначе false.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OfferRepository.GetOffers(System.Func{System.Int32,System.Boolean},System.Func{System.String,System.Boolean},System.Func{System.Int64,System.Boolean},System.Func{System.Int64,System.Boolean})">
            <summary>
            Получает перечень предложений с возможностью фильтрации.
            </summary>
            <param name="genreFilter">Необязательный фильтр по идентификатору жанра.</param>
            <param name="cityFilter">Необязательный фильтр по городу.</param>
            <param name="userFilter">Необязательный фильтр по идентификатору пользователя.</param>
            <param name="notUserFilter">Необязательный фильтр для исключения предложений от определенного пользователя.</param>
            <returns>Перечень предложений, соответствующих заданным критериям.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OfferRepository.GetOffersByGenre(System.Int32,System.Func{System.String,System.Boolean},System.Func{System.Int64,System.Boolean})">
            <summary>
            Получает предложения по жанру с возможностью дополнительной фильтрации.
            </summary>
            <param name="genreId">Идентификатор жанра.</param>
            <param name="cityFilter">Необязательный фильтр по городу.</param>
            <param name="notUserFilter">Необязательный фильтр для исключения предложений от определенного пользователя.</param>
            <returns>Перечень предложений по указанному жанру.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OfferRepository.GetOffersByTitleStart(System.String)">
            <summary>
            Получает предложения, начинающиеся с заданного названия.
            </summary>
            <param name="title">Начало названия для поиска.</param>
            <returns>Перечень предложений с названиями, начинающимися с указанного текста.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OfferRepository.GetOffersByAuthorStart(System.String)">
            <summary>
            Получает предложения по началу имени автора.
            </summary>
            <param name="author">Начало имени автора для поиска.</param>
            <returns>Перечень предложений, авторы которых начинаются с указанного текста.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OfferRepository.AddOfferToFavorite(System.Guid,System.Int64)">
            <summary>
            Добавляет предложение в избранные у пользователя.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="userId">Идентификатор пользователя.</param>
            <exception cref="T:BooksExchanger.Repositories.Exeptions.OfferNotFoundException">Исключение выбрасывается, если предложение с указанным ID не найдено.</exception>
            <exception cref="T:BooksExchanger.Repositories.Exeptions.OfferAlreadyFavoriteException">Исключение выбрасывается, если предложение уже добавлено в избранные.</exception>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OfferRepository.RemoveOfferFromFavorite(System.Guid,System.Int64)">
            <summary>
            Удаляет предложение из избранных у пользователя.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="userId">Идентификатор пользователя.</param>
            <exception cref="T:BooksExchanger.Repositories.Exeptions.OfferAlreadyNotInFavoritesException">Исключение выбрасывается, если предложения нет в избранных у пользователя.</exception>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OfferRepository.RemoveOffer(System.Guid)">
            <summary>
            Удаляет предложение из репозитория.
            </summary>
            <param name="offerId">Идентификатор предложения, которое необходимо удалить.</param>
            <exception cref="T:BooksExchanger.Repositories.Exeptions.OfferNotFoundException">Исключение выбрасывается, если предложение с указанным ID не найдено.</exception>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OfferRepository.IsUserOwnerOffer(System.Guid,System.Int64)">
            <summary>
            Проверяет, является ли пользователь владельцем предложения.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="userId">Идентификатор пользователя.</param>
            <returns>Возвращает true, если пользователь является владельцем предложения, иначе false.</returns>
            <exception cref="T:BooksExchanger.Repositories.Exeptions.OfferNotFoundException">Исключение выбрасывается, если предложение с указанным ID не найдено.</exception>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OfferRepository.GetFavoriteOffers(System.Int64)">
            <summary>
            Получает список избранных предложений пользователя.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <returns>Перечень избранных предложений пользователя.</returns>
        </member>
        <member name="T:BooksExchanger.Repositories.Implementations.OffersCollectorRepository">
            <summary>
            Репозиторий для работы с объявлениями о книгах.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OffersCollectorRepository.#ctor">
            <summary>
            Конструктор репозитория.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OffersCollectorRepository.AddOffer(System.Int64,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal})">
            <summary>
            Добавляет новое объявление в базу данных.
            </summary>
            <param name="userId">Идентификатор пользователя, создавшего объявление.</param>
            <param name="title">Название книги.</param>
            <param name="authors">Авторы книги.</param>
            <param name="city">Город, в котором расположена книга.</param>
            <param name="description">Описание книги (необязательно).</param>
            <param name="imageLink">Ссылка на изображение книги (необязательно).</param>
            <param name="price">Цена книги (необязательно).</param>
            <returns>Идентификатор созданного объявления.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OffersCollectorRepository.SetRejectAndReason(System.Guid,System.String)">
            <summary>
            Устанавливает статус объявления как отклоненный и указывает причину отклонения.
            </summary>
            <param name="offerId">Идентификатор объявления.</param>
            <param name="reason">Причина отклонения объявления.</param>
            <returns>Идентификатор объявления.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OffersCollectorRepository.MoveOfferToApprovedOffers(System.Guid,System.Int64)">
            <summary>
            Перемещает объявление в подтвержденные, связывая его с указанной книгой.
            </summary>
            <param name="offerId">Идентификатор объявления.</param>
            <param name="linkedBookId">Идентификатор связанной книги.</param>
            <returns>Идентификатор нового объявления в подтвержденных.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OffersCollectorRepository.CheckUserOwner(System.Guid,System.Int64)">
            <summary>
            Проверяет, принадлежит ли объявление указанному пользователю.
            </summary>
            <param name="offerId">Идентификатор объявления.</param>
            <param name="userId">Идентификатор пользователя.</param>
            <returns>True, если объявление принадлежит пользователю и False, если нет.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OffersCollectorRepository.RemoveOffer(System.Guid)">
            <summary>
            Удаляет объявление из базы данных.
            </summary>
            <param name="offerId">Идентификатор объявления.</param>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OffersCollectorRepository.GetOffer(System.Nullable{System.Guid})">
            <summary>
            Получает объявление по его идентификатору.
            </summary>
            <param name="offerId">Идентификатор объявления.</param>
            <returns>Объект объявления.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.OffersCollectorRepository.GetOffers(System.Collections.Generic.HashSet{BooksExchanger.Models.ModerationStatus},System.Nullable{System.Int64})">
            <summary>
            Получает список объявлений согласно заданным статусам модерации и, опционально, идентификатору пользователя.
            </summary>
            <param name="moderationStatusSet">Набор статусов модерации.</param>
            <param name="userId">Идентификатор пользователя (необязательно).</param>
            <returns>Список объявлений.</returns>
        </member>
        <member name="T:BooksExchanger.Repositories.Implementations.UserRepository">
            <summary>
            Реализация репозитория пользователей.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.UserRepository.#ctor">
            <summary>
            Создает экземпляр UserRepository.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.UserRepository.GetUserByEmail(System.String)">
            <summary>
            Получает пользователя по его электронной почте.
            </summary>
            <param name="email">Электронная почта пользователя.</param>
            <returns>Модель <see cref="T:BooksExchanger.Models.User"/>, если пользователь с такой почтой существует, иначе null.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.UserRepository.TryAddNewUser(System.String,System.String,System.String)">
            <summary>
            Пытается добавить нового пользователя в систему.
            </summary>
            <param name="name">Имя пользователя.</param>
            <param name="email">Электронная почта пользователя.</param>
            <param name="password">Пароль пользователя.</param>
            <returns>Модель <see cref="T:BooksExchanger.Models.User"/> добавленного пользователя.</returns>
            <exception cref="T:BooksExchanger.Repositories.Exeptions.UserAlreadyExistException">Бросается, если пользователь с такой почтой уже существует.</exception>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.UserRepository.SetAdminByEmail(System.String)">
            <summary>
            Назначает роль администратора пользователю по его электронной почте.
            </summary>
            <param name="email">Электронная почта пользователя.</param>
            <exception cref="T:BooksExchanger.Repositories.Exeptions.UserNotFoundException">Бросается, если пользователь с такой почтой не найден.</exception>
        </member>
        <member name="M:BooksExchanger.Repositories.Implementations.UserRepository.IsUserExist(System.Int64)">
            <summary>
            Проверяет, существует ли пользователь по его идентификатору.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <returns>true, если пользователь существует; иначе false.</returns>
        </member>
        <member name="T:BooksExchanger.Repositories.Interfaces.IAuthorRepository">
            <summary>
            Интерфейс репозитория для работы с авторами.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IAuthorRepository.InsertAuthor(System.String)">
            <summary>
            Добавляет нового автора в систему.
            </summary>
            <param name="name">Имя автора.</param>
            <returns>Идентификатор добавленного автора.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IAuthorRepository.UpdateAuthor(System.Int64,System.String)">
            <summary>
            Обновляет информацию об авторе.
            </summary>
            <param name="id">Идентификатор автора, информацию о котором необходимо обновить.</param>
            <param name="name">Новое имя автора.</param>
            <returns>Идентификатор обновленного автора.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IAuthorRepository.GetAuthors">
            <summary>
            Получает список всех авторов.
            </summary>
            <returns>Коллекция авторов.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IAuthorRepository.GetAuthors(System.Func{System.String,System.Boolean})">
            <summary>
            Получает список авторов, соответствующих заданному условию.
            </summary>
            <param name="filter">Функция фильтрации авторов по их имени.</param>
            <returns>Коллекция отфильтрованных авторов.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IAuthorRepository.RemoveAuthor(System.Int64)">
            <summary>
            Удаляет автора по идентификатору.
            </summary>
            <param name="id">Идентификатор автора, которого необходимо удалить.</param>
        </member>
        <member name="T:BooksExchanger.Repositories.Interfaces.IBookRepository">
            <summary>
            Определяет методы для работы с книгами в хранилище.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IBookRepository.InsertBook(System.String,System.Int32,System.Collections.Generic.List{System.Int64})">
            <summary>
            Добавляет новую книгу в хранилище.
            </summary>
            <param name="title">Название книги.</param>
            <param name="genreId">Идентификатор жанра книги.</param>
            <param name="authorIds">Список идентификаторов авторов книги.</param>
            <returns>Идентификатор добавленной книги.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IBookRepository.UpdateBook(System.Int64,System.String,System.Int32,System.Collections.Generic.List{System.Int64})">
            <summary>
            Обновляет информацию о книге в хранилище.
            </summary>
            <param name="bookId">Идентификатор книги, информацию о которой нужно обновить.</param>
            <param name="title">Новое название книги.</param>
            <param name="genreId">Новый идентификатор жанра книги.</param>
            <param name="authorIds">Новый список идентификаторов авторов книги.</param>
            <returns>Идентификатор обновленной книги.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IBookRepository.GetBooks(System.Func{System.Int64,System.Boolean})">
            <summary>
            Получает книги из хранилища по заданному фильтру по идентификатору.
            </summary>
            <param name="filter">Функция фильтрации по идентификатору книги.</param>
            <returns>Список книг, удовлетворяющих условиям фильтра.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IBookRepository.GetBooks(System.Func{System.String,System.Boolean})">
            <summary>
            Получает книги из хранилища по заданному фильтру по названию.
            </summary>
            <param name="filter">Функция фильтрации по названию книги.</param>
            <returns>Перечисление книг, удовлетворяющих условиям фильтра.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IBookRepository.RemoveBook(System.Int64)">
            <summary>
            Удаляет книгу из хранилища по её идентификатору.
            </summary>
            <param name="bookId">Идентификатор книги для удаления.</param>
        </member>
        <member name="T:BooksExchanger.Repositories.Interfaces.IChatRepository">
            <summary>
            Интерфейс репозитория для работы с чатами.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IChatRepository.GetChats(System.Int64,System.Boolean)">
            <summary>
            Получает список чатов для пользователя.
            </summary>
            <param name="userId">Идентификатор пользователя, для которого необходимо получить списки чатов.</param>
            <param name="needOrderMessagesByDescending">Если true, сообщения в чатах упорядочиваются по убыванию; в противном случае, по возрастанию.</param>
            <returns>Коллекция чатов пользователя.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IChatRepository.GetChatWithMessages(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Получает чат между двумя пользователями с историей сообщений.
            </summary>
            <param name="firstUserId">Идентификатор первого пользователя.</param>
            <param name="secondUserId">Идентификатор второго пользователя.</param>
            <param name="needOrderMessagesByDescending">Если true, сообщения упорядочиваются по убыванию; в противном случае, по возрастанию.</param>
            <returns>Чат между пользователями с историей сообщений или null, если чат не найден.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IChatRepository.CreateChatWithMessages(System.Int64,System.Int64)">
            <summary>
            Создает чат между двумя пользователями.
            </summary>
            <param name="firstUserId">Идентификатор первого пользователя.</param>
            <param name="secondUserId">Идентификатор второго пользователя.</param>
            <returns>Созданный чат с сообщениями.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IChatRepository.AddMessage(System.Int64,System.Int64,System.String)">
            <summary>
            Добавляет сообщение в чат.
            </summary>
            <param name="senderId">Идентификатор отправителя сообщения.</param>
            <param name="chatId">Идентификатор чата, в который добавляется сообщение.</param>
            <param name="text">Текст сообщения.</param>
            <returns>Идентификатор созданного сообщения.</returns>
        </member>
        <member name="T:BooksExchanger.Repositories.Interfaces.IFeedbackRepository">
            <summary>
            Интерфейс хранилища отзывов.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IFeedbackRepository.UpdateFeedback(System.Int64,System.Guid,System.String,System.Nullable{System.Int32},BooksExchanger.Models.BookEstimation)">
            <summary>
            Обновляет отзыв.
            </summary>
            <param name="authorId">id автора отзыва.</param>
            <param name="offerId">id оффера.</param>
            <param name="text">Текст отзыва.</param>
            <param name="estimation">Оценка от пользователя.</param>
            <param name="bookEstimation"></param>
            <returns>Оценка книги.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IFeedbackRepository.InsertFeedback(System.Int64,System.Guid,System.String,System.Nullable{System.Int32})">
            <summary>
            Вставляет новый отзыв.
            </summary>
            <param name="authorId">Идентификатор автора отзыва.</param>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="text">Текст отзыва.</param>
            <param name="estimation">Оценка отзыва (может быть null).</param>
            <returns>Идентификатор вновь вставленного отзыва.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IFeedbackRepository.GetFeedback(System.Guid,System.Int64)">
            <summary>
            Получает отзыв по идентификатору предложения и автора.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="authorId">Идентификатор автора отзыва.</param>
            <returns>Объект отзыва или null, если отзыв не найден.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IFeedbackRepository.GetFeedback(System.Int64)">
            <summary>
            Получает отзыв по идентификатору отзыва.
            </summary>
            <param name="feedbackId">Идентификатор отзыва.</param>
            <returns>Объект отзыва или null, если отзыв не найден.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IFeedbackRepository.RemoveFeedback(System.Int64)">
            <summary>
            Удаляет отзыв.
            </summary>
            <param name="feedbackId">Идентификатор отзыва.</param>
            <returns>True, если отзыв успешно удален; иначе false.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IFeedbackRepository.GetFeedbacks(System.Guid)">
            <summary>
            Получает список отзывов по идентификатору предложения.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
        </member>
        <member name="T:BooksExchanger.Repositories.Interfaces.IGenreRepository">
            <summary>
            Предоставляет интерфейс для работы с жанрами в репозитории.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IGenreRepository.InsertGenre(System.String)">
            <summary>
            Добавляет новый жанр в репозиторий.
            </summary>
            <param name="name">Название жанра.</param>
            <returns>Идентификатор добавленного жанра.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IGenreRepository.UpdateGenre(System.Int32,System.String)">
            <summary>
            Обновляет информацию о жанре.
            </summary>
            <param name="id">Идентификатор жанра, который необходимо обновить.</param>
            <param name="name">Новое название жанра.</param>
            <returns>Идентификатор обновленного жанра.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IGenreRepository.GetGenres">
            <summary>
            Получает все жанры из репозитория.
            </summary>
            <returns>Перечисление жанров.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IGenreRepository.GetGenres(System.Func{System.String,System.Boolean})">
            <summary>
            Получает жанры, удовлетворяющие заданному условию фильтра.
            </summary>
            <param name="filter">Функция фильтрации жанров по названию.</param>
            <returns>Перечисление жанров, удовлетворяющих условию фильтра.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IGenreRepository.RemoveGenre(System.Int32)">
            <summary>
            Удаляет жанр из репозитория по его идентификатору.
            </summary>
            <param name="id">Идентификатор жанра, который необходимо удалить.</param>
        </member>
        <member name="T:BooksExchanger.Repositories.Interfaces.IOfferRepository">
            <summary>
            Интерфейс хранилища офферов.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IOfferRepository.GetOffer(System.Guid)">
            <summary>
            Возвращает отзыв.
            </summary>
            <param name="offerId">id отзыва.</param>
            <returns>Информация об отзыве.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IOfferRepository.IsFavoriteForUser(System.Int64,System.Guid)">
            <summary>
            Проверяет, является ли предложение избранным для пользователя.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <param name="offerId">Идентификатор предложения.</param>
            <returns>True, если предложение избранное для пользователя; иначе false.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IOfferRepository.GetOffers(System.Func{System.Int32,System.Boolean},System.Func{System.String,System.Boolean},System.Func{System.Int64,System.Boolean},System.Func{System.Int64,System.Boolean})">
            <summary>
            Возвращает список предложений с учетом указанных функций фильтрации.
            </summary>
            <param name="genreFilter">Функция фильтрации по жанру.</param>
            <param name="cityFilter">Функция фильтрации по городу.</param>
            <param name="userFilter">Функция фильтрации по идентификатору пользователя.</param>
            <param name="notUserFilter">Функция фильтрации по идентификатору пользователя, исключая указанного.</param>
            <returns>Коллекция объектов предложений.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IOfferRepository.AddOfferToFavorite(System.Guid,System.Int64)">
            <summary>
            Добавляет предложение в избранное для пользователя.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="userId">Идентификатор пользователя.</param>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IOfferRepository.RemoveOfferFromFavorite(System.Guid,System.Int64)">
            <summary>
            Удаляет предложение из избранного для пользователя.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="userId">Идентификатор пользователя.</param>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IOfferRepository.RemoveOffer(System.Guid)">
            <summary>
            Удаляет предложение.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BooksExchanger.Repositories.Interfaces.IOfferRepository.IsUserOwnerOffer(System.Guid,System.Int64)" -->
        <member name="M:BooksExchanger.Repositories.Interfaces.IOfferRepository.GetFavoriteOffers(System.Int64)">
            <summary>
            Возвращает список избранных предложений для пользователя.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <returns>Коллекция объектов предложений избранных для пользователя.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IOfferRepository.GetOffersByGenre(System.Int32,System.Func{System.String,System.Boolean},System.Func{System.Int64,System.Boolean})">
            <summary>
            Возвращает список предложений по указанному жанру с учетом функций фильтрации.
            </summary>
            <param name="genreId">Идентификатор жанра.</param>
            <param name="cityFilter">Функция фильтрации по городу.</param>
            <param name="notUserFilter">Функция фильтрации по идентификатору пользователя, исключая указанного.</param>
            <returns>Коллекция объектов предложений по указанному жанру.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IOfferRepository.GetOffersByTitleStart(System.String)">
            <summary>
            Возвращает список предложений, название которых начинается с указанной строки.
            </summary>
            <param name="title">Начальная строка названия предложения.</param>
            <returns>Коллекция объектов предложений.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IOfferRepository.GetOffersByAuthorStart(System.String)">
            <summary>
            Возвращает список предложений, автор которых начинается с указанной строки.
            </summary>
            <param name="author">Начальная строка для имени автора предложения.</param>
            <returns>Коллекция объектов предложений.</returns>
        </member>
        <member name="T:BooksExchanger.Repositories.Interfaces.IOffersCollectorRepository">
            <summary>
            Интерфейс репозитория для управления предложениями книг.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IOffersCollectorRepository.AddOffer(System.Int64,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal})">
            <summary>
            Добавляет новое предложение книги.
            </summary>
            <param name="userId">Идентификатор пользователя, создавшего предложение.</param>
            <param name="title">Название книги.</param>
            <param name="authors">Авторы книги.</param>
            <param name="city">Город, в котором находится книга.</param>
            <param name="description">Описание книги (необязательно).</param>
            <param name="imageLink">Ссылка на изображение обложки книги (необязательно).</param>
            <param name="price">Цена книги (необязательно).</param>
            <returns>Идентификатор созданного предложения.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IOffersCollectorRepository.SetRejectAndReason(System.Guid,System.String)">
            <summary>
            Устанавливает для предложения статус "отклонено" с указанием причины.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="reason">Причина отклонения предложения.</param>
            <returns>Идентификатор предложения.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IOffersCollectorRepository.MoveOfferToApprovedOffers(System.Guid,System.Int64)">
            <summary>
            Перемещает предложение в подтвержденные с привязкой к существующей книге.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="linkedBookId">Идентификатор связанной книги.</param>
            <returns>Идентификатор нового предложения в списке подтвержденных.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IOffersCollectorRepository.CheckUserOwner(System.Guid,System.Int64)">
            <summary>
            Проверяет, принадлежит ли предложение указанному пользователю.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="userId">Идентификатор пользователя.</param>
            <returns>True, если пользователь является владельцем предложения; иначе false.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IOffersCollectorRepository.RemoveOffer(System.Guid)">
            <summary>
            Удаляет предложение.
            </summary>
            <param name="offerId">Идентификатор предложения для удаления.</param>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IOffersCollectorRepository.GetOffer(System.Nullable{System.Guid})">
            <summary>
            Получает информацию о предложении по его идентификатору.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <returns>Предложение с информацией или null, если предложение не найдено.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IOffersCollectorRepository.GetOffers(System.Collections.Generic.HashSet{BooksExchanger.Models.ModerationStatus},System.Nullable{System.Int64})">
            <summary>
            Получает список предложений по заданным статусам модерации и, опционально, идентификатору пользователя.
            </summary>
            <param name="moderationStatusSet">Набор статусов модерации.</param>
            <param name="userId">Идентификатор пользователя (необязательно).</param>
            <returns>Список предложений.</returns>
        </member>
        <member name="T:BooksExchanger.Repositories.Interfaces.IUserRepository">
            <summary>
            Интерфейс репозитория пользователей.
            </summary>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IUserRepository.GetUserByEmail(System.String)">
            <summary>
            Получает пользователя по его электронной почте.
            </summary>
            <param name="email">Электронная почта пользователя.</param>
            <returns>Модель пользователя, если пользователь существует; иначе null.</returns>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IUserRepository.TryAddNewUser(System.String,System.String,System.String)">
            <summary>
            Пытается добавить нового пользователя в систему.
            </summary>
            <param name="name">Имя пользователя.</param>
            <param name="email">Электронная почта пользователя.</param>
            <param name="password">Пароль пользователя.</param>
            <returns>Модель созданного пользователя.</returns>
            <remarks>Метод генерирует исключение, если пользователь с такой электронной почтой уже существует.</remarks>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IUserRepository.SetAdminByEmail(System.String)">
            <summary>
            Назначает пользователю роль администратора по его электронной почте.
            </summary>
            <param name="email">Электронная почта пользователя.</param>
            <remarks>Метод генерирует исключение, если пользователь с указанной электронной почтой не найден.</remarks>
        </member>
        <member name="M:BooksExchanger.Repositories.Interfaces.IUserRepository.IsUserExist(System.Int64)">
            <summary>
            Проверяет, существует ли пользователь по его идентификатору.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <returns>True, если пользователь существует; иначе false.</returns>
        </member>
        <member name="T:BooksExchanger.Context.DbCtx">
            <summary>
            Контекст БД.
            </summary>
        </member>
        <member name="M:BooksExchanger.Context.DbCtx.#cctor">
            <summary>
            Статический конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Context.DbCtx.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Context.DbCtx.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{BooksExchanger.Context.DbCtx})">
            <summary>
            Конструктор.
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:BooksExchanger.Context.DbCtx.Authors">
            <summary>
            Авторы.
            </summary>
        </member>
        <member name="P:BooksExchanger.Context.DbCtx.Books">
            <summary>
            Книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Context.DbCtx.Chats">
            <summary>
            Чаты.
            </summary>
        </member>
        <member name="P:BooksExchanger.Context.DbCtx.Feedbacks">
            <summary>
            Отзывы.
            </summary>
        </member>
        <member name="P:BooksExchanger.Context.DbCtx.Genres">
            <summary>
            Жанры.
            </summary>
        </member>
        <member name="P:BooksExchanger.Context.DbCtx.Messages">
            <summary>
            Сообщения.
            </summary>
        </member>
        <member name="P:BooksExchanger.Context.DbCtx.Offers">
            <summary>
            Офферы.
            </summary>
        </member>
        <member name="P:BooksExchanger.Context.DbCtx.OffersCollectors">
            <summary>
            Офферы на модрации.
            </summary>
        </member>
        <member name="P:BooksExchanger.Context.DbCtx.Users">
            <summary>
            Пользователи.
            </summary>
        </member>
        <member name="T:BooksExchanger.Entities.Author">
            <summary>
            Класс автора в БД.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Author.Id">
            <summary>
            Id автора.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Author.Name">
            <summary>
            Имя пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Author.Books">
            <summary>
            Связанные книги.
            </summary>
        </member>
        <member name="T:BooksExchanger.Entities.Book">
            <summary>
            Объект книги в БД.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Book.Id">
            <summary>
            id книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Book.Title">
            <summary>
            Заголовок книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Book.GenreId">
            <summary>
            id жанра
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Book.SumRating">
            <summary>
            Сумма оценок иниги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Book.CountRating">
            <summary>
            Количество оценок книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Book.CreatedAt">
            <summary>
            Дата и время создания книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Book.DeletedAt">
            <summary>
            Дата и время удаления книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Book.Feedbacks">
            <summary>
            Отзывы на книгу.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Book.Genre">
            <summary>
            Информация о жанре.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Book.Offers">
            <summary>
            Связанные с книгой офферы.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Book.Authors">
            <summary>
            Связанные с книгой авторы.
            </summary>
        </member>
        <member name="T:BooksExchanger.Entities.Chat">
            <summary>
            Объект чата в БД.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Chat.ChatId">
            <summary>
            id чата.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Chat.User1Id">
            <summary>
            id первого юзера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Chat.User2Id">
            <summary>
            id второго юзера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Chat.CreatedAt">
            <summary>
            Дата и время создания чата.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Chat.Messages">
            <summary>
            Связанные с чатом сообщения.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Chat.User1">
            <summary>
            Информация о первом пользователе.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Chat.User2">
            <summary>
            Информация о втором пользователе.
            </summary>
        </member>
        <member name="T:BooksExchanger.Entities.Feedback">
            <summary>
            Объект отзыва 
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Feedback.Id">
            <summary>
            id отзыва.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Feedback.BookId">
            <summary>
            id книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Feedback.Feedback1">
            <summary>
            Содержание отзыва.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Feedback.GivenByUserId">
            <summary>
            id автора отзыва.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Feedback.Estimation">
            <summary>
            Оценка.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Feedback.CreatedAt">
            <summary>
            Дата и время создания.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Feedback.DeletedAt">
            <summary>
            Дата и время удаления.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Feedback.Book">
            <summary>
            Связанная книга.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Feedback.GivenByUser">
            <summary>
            Информация лб авторе отзыва.
            </summary>
        </member>
        <member name="T:BooksExchanger.Entities.Genre">
            <summary>
            Объект жанра в БД.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Genre.Id">
            <summary>
            id жанра.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Genre.Name">
            <summary>
            Название жанра.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Genre.Books">
            <summary>
            Связанные книги.
            </summary>
        </member>
        <member name="T:BooksExchanger.Entities.Message">
            <summary>
            Объект сообщения в БД.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Message.MessageId">
            <summary>
            id сообщения.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Message.ChatId">
            <summary>
            id чата.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Message.UserId">
            <summary>
            id пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Message.Text">
            <summary>
            Текст сообщения.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Message.SentAt">
            <summary>
            Дата и время отправки.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Message.Chat">
            <summary>
            Связанный чат.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Message.User">
            <summary>
            Информация о пользователе.
            </summary>
        </member>
        <member name="T:BooksExchanger.Entities.ModerationStatus">
            <summary>
            Структура статуса модерации.
            </summary>
        </member>
        <member name="F:BooksExchanger.Entities.ModerationStatus.Submitted">
            <summary>
            Отправлен.
            </summary>
        </member>
        <member name="F:BooksExchanger.Entities.ModerationStatus.Consideration">
            <summary>
            На рассмотрении.
            </summary>
        </member>
        <member name="F:BooksExchanger.Entities.ModerationStatus.Approved">
            <summary>
            Подтвержден.
            </summary>
        </member>
        <member name="F:BooksExchanger.Entities.ModerationStatus.Rejected">
            <summary>
            Отклонен.
            </summary>
        </member>
        <member name="T:BooksExchanger.Entities.Offer">
            <summary>
            Объект оффера в БД.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Offer.Id">
            <summary>
            id оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Offer.BookId">
            <summary>
            id книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Offer.OwnerId">
            <summary>
            id владельца.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Offer.Description">
            <summary>
            Описание.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Offer.Price">
            <summary>
            Цена.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Offer.City">
            <summary>
            Город размещения оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Offer.Picture">
            <summary>
            Ссылка на картинку.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Offer.CreatedAt">
            <summary>
            Дата и время создания.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Offer.DeletedAt">
            <summary>
            Дата и время удаления.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Offer.Book">
            <summary>
            Связанная книга.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Offer.Owner">
            <summary>
            Информация о владльце.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.Offer.Users">
            <summary>
            Пользователи, у которых оффер в избранном.
            </summary>
        </member>
        <member name="T:BooksExchanger.Entities.OffersCollector">
            <summary>
            Объект оффера до модерации в БД.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.OffersCollector.Id">
            <summary>
            id оффера.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.OffersCollector.OwnerId">
            <summary>
            id владельца.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.OffersCollector.Title">
            <summary>
            Заголовок.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.OffersCollector.Authors">
            <summary>
            Авторы книги.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.OffersCollector.Description">
            <summary>
            Описание.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.OffersCollector.Price">
            <summary>
            Цена.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.OffersCollector.ModerationStatus">
            <summary>
            Статус модерации.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.OffersCollector.City">
            <summary>
            Город размещения.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.OffersCollector.RejectReason">
            <summary>
            Прицина отказа.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.OffersCollector.Picture">
            <summary>
            Ссылка на картинку.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.OffersCollector.CreatedAt">
            <summary>
            Дата и время создания.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.OffersCollector.DeletedAt">
            <summary>
            Дата и время удаления.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.OffersCollector.Owner">
            <summary>
            Информация о владельце.
            </summary>
        </member>
        <member name="T:BooksExchanger.Entities.User">
            <summary>
            Объект пользователя в БД.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.User.Id">
            <summary>
            id пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.User.Name">
            <summary>
            Имя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.User.Email">
            <summary>
            Почта.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.User.Password">
            <summary>
            Пароль.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.User.Role">
            <summary>
            Роль.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.User.ChatUser1s">
            <summary>
            Чаты пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.User.ChatUser2s">
            <summary>
            Чаты пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.User.Feedbacks">
            <summary>
            Отзывы пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.User.Messages">
            <summary>
            Сообщения пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.User.Offers">
            <summary>
            Офферы пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.User.OffersCollectors">
            <summary>
            Офферы пользователя на модерации.
            </summary>
        </member>
        <member name="P:BooksExchanger.Entities.User.OffersNavigation">
            <summary>
            Избранные офферы пользователя.
            </summary>
        </member>
        <member name="T:BooksExchanger.Entities.UserRole">
            <summary>
            Объект роли пользователя в БД.
            </summary>
        </member>
        <member name="F:BooksExchanger.Entities.UserRole.User">
            <summary>
            Роль пользователя.
            </summary>
        </member>
        <member name="F:BooksExchanger.Entities.UserRole.Admin">
            <summary>
            Роль админа.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Exceptions.AuthorNotFoundException">
            <summary>
            Автора не найдено.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.AuthorNotFoundException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.AuthorNotFoundException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.AuthorNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Exceptions.BookNotFoundException">
            <summary>
            Книга не найдена.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.BookNotFoundException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.BookNotFoundException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.BookNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Exceptions.FeedbackNotFoundException">
            <summary>
            Не найден отзыв.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.FeedbackNotFoundException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.FeedbackNotFoundException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.FeedbackNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Exceptions.GenreAlreadyExistsException">
            <summary>
            Жанр уже существует.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.GenreAlreadyExistsException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.GenreAlreadyExistsException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.GenreAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Exceptions.GenreNotFoundException">
            <summary>
            Жанра не найдено.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.GenreNotFoundException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.GenreNotFoundException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.GenreNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Exceptions.OfferAlreadyApprovedException">
            <summary>
            Оффер уже подтвержден.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.OfferAlreadyApprovedException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.OfferAlreadyApprovedException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.OfferAlreadyApprovedException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Exceptions.OfferAlreadyFavoriteException">
            <summary>
            Оффер уже находится в избранном.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.OfferAlreadyFavoriteException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.OfferAlreadyFavoriteException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.OfferAlreadyFavoriteException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Exceptions.OfferAlreadyNotInFavoritesException">
            <summary>
            Оффер уже удален из избранного пользователя.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.OfferAlreadyNotInFavoritesException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.OfferAlreadyNotInFavoritesException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.OfferAlreadyNotInFavoritesException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Exceptions.OfferNotFoundException">
            <summary>
            Оффер не найден.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.OfferNotFoundException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.OfferNotFoundException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.OfferNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Exceptions.PermissionDenidedException">
            <summary>
            Не хватает прав.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.PermissionDenidedException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.PermissionDenidedException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.PermissionDenidedException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Exceptions.RemoveAuthorNotAllowedException">
            <summary>
            Нельзя удалить автора.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.RemoveAuthorNotAllowedException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.RemoveAuthorNotAllowedException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.RemoveAuthorNotAllowedException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Exceptions.RemoveBookNotAllowedException">
            <summary>
            Удаленить книгу нельзя.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.RemoveBookNotAllowedException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.RemoveBookNotAllowedException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.RemoveBookNotAllowedException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Exceptions.RemoveGenreNotAllowedException">
            <summary>
            Удалить жанр нельзя.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.RemoveGenreNotAllowedException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.RemoveGenreNotAllowedException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.RemoveGenreNotAllowedException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Exceptions.UserNotOfferOwnerException">
            <summary>
            Пользователь не является владельцем объявления.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.UserNotOfferOwnerException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.UserNotOfferOwnerException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Exceptions.UserNotOfferOwnerException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Implementations.UserService.Exceptions.IncorrectPasswordException">
            <summary>
            Пароль неверный.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.UserService.Exceptions.IncorrectPasswordException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.UserService.Exceptions.IncorrectPasswordException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.UserService.Exceptions.IncorrectPasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Implementations.UserService.Exceptions.UserAlreadyExistExeption">
            <summary>
            Пользователь уже существует.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.UserService.Exceptions.UserAlreadyExistExeption.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.UserService.Exceptions.UserAlreadyExistExeption.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.UserService.Exceptions.UserAlreadyExistExeption.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Implementations.UserService.Exceptions.UserNotFoundException">
            <summary>
            Пользователя не существует.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.UserService.Exceptions.UserNotFoundException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.UserService.Exceptions.UserNotFoundException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.UserService.Exceptions.UserNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.Services.Implementations.UserService.UserService">
            <summary>
            Сервис пользователей.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.UserService.UserService.#ctor(Microsoft.Extensions.Options.IOptions{BooksExchanger.Settings.AppSettings},BooksExchanger.Repositories.Interfaces.IUserRepository)">
            <summary>
            Инициализирует новый экземпляр службы пользователей.
            </summary>
            <param name="settings">Настройки приложения.</param>
            <param name="repository">Репозиторий пользователей.</param>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.UserService.UserService.GetAuthToken(System.String,System.String)">
            <summary>
            Генерирует токен аутентификации для пользователя.
            </summary>
            <param name="email">Электронная почта пользователя.</param>
            <param name="password">Пароль пользователя.</param>
            <returns>Строка, содержащая JWT-токен.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.UserService.UserService.RegisterUser(System.String,System.String,System.String)">
            <summary>
            Регистрирует пользователя и генерирует токен аутентификации.
            </summary>
            <param name="name">Имя пользователя.</param>
            <param name="email">Электронная почта пользователя.</param>
            <param name="password">Пароль пользователя.</param>
            <returns>Строка, содержащая JWT-токен.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.UserService.UserService.IsUserRegistered(System.String)">
            <summary>
            Проверяет, зарегистрирован ли пользователь.
            </summary>
            <param name="email">Электронная почта пользователя.</param>
            <returns>true, если пользователь зарегистрирован; иначе false.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.UserService.UserService.IsUserExist(System.Int64)">
            <summary>
            Проверяет, существует ли пользователь.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <returns>true, если пользователь существует; иначе false.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.UserService.UserService.SetAdmin(System.String)">
            <summary>
            Назначает пользователю роль администратора.
            </summary>
            <param name="email">Электронная почта пользователя.</param>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.UserService.UserService.GenerateJwtToken(BooksExchanger.Models.User)">
            <summary>
            Генерирует JWT-токен для пользователя.
            </summary>
            <param name="user">Данные пользователя, для которого генерируется токен.</param>
            <returns>Строка, содержащая JWT-токен.</returns>
        </member>
        <member name="T:BooksExchanger.Services.Implementations.AuthorService.AuthorService">
            <summary>
            Сервис для работы с авторами.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.AuthorService.AuthorService.#ctor(BooksExchanger.Repositories.Interfaces.IAuthorRepository)">
            <summary>
            Инициализирует новый экземпляр сервиса авторов.
            </summary>
            <param name="authorRepository">Репозиторий авторов.</param>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.AuthorService.AuthorService.AddAuthor(System.String)">
            <summary>
            Добавляет автора.
            </summary>
            <param name="name">Имя автора.</param>
            <returns>Идентификатор добавленного автора.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.AuthorService.AuthorService.UpdateAuthor(System.Int64,System.String)">
            <summary>
            Обновляет данные об авторе.
            </summary>
            <param name="id">Идентификатор автора.</param>
            <param name="name">Новое имя автора.</param>
            <returns>Идентификатор обновленного автора.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.AuthorService.AuthorService.GetAuthors">
            <summary>
            Получает список всех авторов.
            </summary>
            <returns>Коллекция авторов.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.AuthorService.AuthorService.SearchAuthors(System.String)">
            <summary>
            Поиск авторов по имени.
            </summary>
            <param name="name">Имя или его часть для поиска авторов.</param>
            <returns>Коллекция авторов, соответствующих условию поиска.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.AuthorService.AuthorService.RemoveAuthor(System.Int64)">
            <summary>
            Удаляет автора по идентификатору.
            </summary>
            <param name="id">Идентификатор автора для удаления.</param>
        </member>
        <member name="T:BooksExchanger.Services.Implementations.BookService.BookService">
            <summary>
            Предоставляет сервис для работы с книгами.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.BookService.BookService.#ctor(BooksExchanger.Repositories.Interfaces.IBookRepository)">
            <summary>
            Инициализирует новый экземпляр сервиса <see cref="T:BooksExchanger.Services.Implementations.BookService.BookService"/>.
            </summary>
            <param name="bookRepository">Репозиторий книг, используемый сервисом.</param>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.BookService.BookService.AddBook(System.String,System.Int32,System.Collections.Generic.List{System.Int64})">
            <summary>
            Добавляет новую книгу.
            </summary>
            <param name="title">Название книги.</param>
            <param name="genreId">Идентификатор жанра книги.</param>
            <param name="authorIds">Список идентификаторов авторов книги.</param>
            <returns>Идентификатор добавленной книги.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.BookService.BookService.UpdateBook(System.Int64,System.String,System.Int32,System.Collections.Generic.List{System.Int64})">
            <summary>
            Обновляет информацию о существующей книге.
            </summary>
            <param name="bookId">Идентификатор книги для обновления.</param>
            <param name="title">Новое название книги.</param>
            <param name="genreId">Идентификатор нового жанра книги.</param>
            <param name="authorIds">Список идентификаторов авторов книги.</param>
            <returns>Идентификатор обновленной книги.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.BookService.BookService.GetBooks(System.Nullable{System.Int64})">
            <summary>
            Получает список всех книг или книгу по её идентификатору.
            </summary>
            <param name="bookId">Необязательный идентификатор книги.</param>
            <returns>Список книг.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.BookService.BookService.SearchBooks(System.String)">
            <summary>
            Ищет книги по началу названия.
            </summary>
            <param name="title">Начало названия книги для поиска.</param>
            <returns>Перечисление книг, начинающихся с указанного названия.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.BookService.BookService.RemoveBook(System.Int64)">
            <summary>
            Удаляет книгу по её идентификатору.
            </summary>
            <param name="bookId">Идентификатор книги.</param>
        </member>
        <member name="T:BooksExchanger.Services.Implementations.ChatService.ChatService">
            <summary>
            Сервис для работы с чатами.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.ChatService.ChatService.#ctor(BooksExchanger.Repositories.Interfaces.IChatRepository)">
            <summary>
            Конструктор сервиса чатов.
            </summary>
            <param name="chatRepository">Репозиторий чатов.</param>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.ChatService.ChatService.GetChats(System.Int64)">
            <summary>
            Получает список всех чатов для указанного пользователя.
            </summary>
            <param name="userId">Идентификатор пользователя, чьи чаты необходимо получить.</param>
            <returns>Коллекция чатов пользователя.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.ChatService.ChatService.GetChatWithMessages(System.Int64,System.Int64)">
            <summary>
            Получает детали чата вместе с сообщениями между текущим пользователем и другим указанным пользователем.
            Создает новый чат, если таковой не существует.
            </summary>
            <param name="currentUserId">Идентификатор текущего пользователя.</param>
            <param name="secondUserId">Идентификатор другого пользователя, с которым идет обмен сообщениями.</param>
            <returns>Детали чата с сообщениями.</returns>
        </member>
        <member name="T:BooksExchanger.Services.Implementations.FeedbackService.FeedbackService">
            <summary>
            Сервис отзывов.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.FeedbackService.FeedbackService.#ctor(BooksExchanger.Repositories.Interfaces.IFeedbackRepository)">
            <summary>
            Конструктор.
            </summary>
            <param name="feedbackRepository">Хранилище отзывов.</param>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.FeedbackService.FeedbackService.CulcBookEstimation(BooksExchanger.Models.BookEstimation,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Вычисляет оценку книги.
            </summary>
            <param name="currentEstimaion">Текущая оценка книги.</param>
            <param name="lastUserEstimation">Предыдущая оценка пользователя.</param>
            <param name="newUserEstimation">Новая оценка пользователя.</param>
            <returns>Обновленная оценка книги.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.FeedbackService.FeedbackService.AddOrEditFeedback(System.Guid,System.Int64,System.String,System.Nullable{System.Int32})">
            <summary>
            Добавляет или обновляет отзыв.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="authorId">Идентификатор автора отзыва.</param>
            <param name="text">Текст отзыва.</param>
            <param name="estimation">Оценка отзыва.</param>
            <returns>Идентификатор добавленного или обновленного отзыва.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.FeedbackService.FeedbackService.GetFeedbacks(System.Guid)">
            <summary>
            Возвращает список отзывов для предложения.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <returns>Коллекция объектов отзывов.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.FeedbackService.FeedbackService.RemoveFeedback(System.Int64,System.Func{BooksExchanger.Models.Feedback,System.Boolean})">
            <summary>
            Удаляет отзыв.
            </summary>
            <param name="feedbackId">Идентификатор отзыва.</param>
            <param name="permissionsCheker">Функция проверки прав доступа.</param>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.FeedbackService.FeedbackService.FilterOutUserFeedback(System.Collections.Generic.List{BooksExchanger.Models.Feedback},System.Int64)">
            <summary>
            Фильтрует отзыв пользователя из списка отзывов.
            </summary>
            <param name="feedbacks">Список отзывов.</param>
            <param name="userId">Идентификатор пользователя.</param>
            <returns>Отзыв пользователя или null, если не найден.</returns>
        </member>
        <member name="T:BooksExchanger.Services.Implementations.GenreService.GenreService">
            <summary>
            Предоставляет сервис для работы с жанрами.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.GenreService.GenreService.#ctor(BooksExchanger.Repositories.Interfaces.IGenreRepository)">
            <summary>
            Инициализирует новый экземпляр сервиса жанров.
            </summary>
            <param name="genreRepository">Репозиторий для работы с жанрами.</param>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.GenreService.GenreService.AddGenre(System.String)">
            <summary>
            Добавляет новый жанр.
            </summary>
            <param name="name">Название жанра.</param>
            <returns>Идентификатор добавленного жанра.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.GenreService.GenreService.UpdateGenre(System.Int32,System.String)">
            <summary>
            Обновляет сведения о жанре.
            </summary>
            <param name="id">Идентификатор обновляемого жанра.</param>
            <param name="name">Новое название жанра.</param>
            <returns>Идентификатор обновленного жанра.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.GenreService.GenreService.GetGenres">
            <summary>
            Возвращает перечень всех жанров.
            </summary>
            <returns>Коллекцию жанров.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.GenreService.GenreService.RemoveGenre(System.Int32)">
            <summary>
            Ищет жанры, соответствующие заданному имени.
            </summary>
            <param name="name">Название жанра для поиска.</param>
            <returns>Коллекцию найденных жанров.</returns>
        </member>
        <member name="T:BooksExchanger.Services.Implementations.OffersCollectorService.OffersCollectorService">
            <summary>
            Сервис офферов для модерации.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.OffersCollectorService.OffersCollectorService.#ctor(BooksExchanger.Services.Interfaces.IImageStorageService,BooksExchanger.Repositories.Interfaces.IOffersCollectorRepository)">
            <summary>
            Инициализирует новый экземпляр службы сбора предложений.
            </summary>
            <param name="imageStorageService">Служба хранения изображений.</param>
            <param name="offersCollectorRepository">Репозиторий коллектора предложений.</param>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.OffersCollectorService.OffersCollectorService.CreateOffer(System.Int64,System.String,System.String,System.String,System.String,Microsoft.AspNetCore.Http.IFormFile,System.Nullable{System.Decimal})">
            <summary>
            Создает предложение об обмене книгой.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <param name="title">Название книги.</param>
            <param name="authors">Авторы книги.</param>
            <param name="city">Город, в котором предлагается книга.</param>
            <param name="description">Описание книги.</param>
            <param name="image">Фотография обложки книги.</param>
            <param name="price">Цена предложения.</param>
            <returns>Идентификатор созданного предложения.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.OffersCollectorService.OffersCollectorService.RejectOffer(System.Guid,System.String)">
            <summary>
            Отклоняет предложение с указанием причины.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="reason">Причина отклонения.</param>
            <returns>Идентификатор отклоненного предложения.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.OffersCollectorService.OffersCollectorService.ApproveOfferAndGetId(System.Guid,System.Int64)">
            <summary>
            Подтверждает предложение и связывает его с идентификатором книги.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="linkedBookId">Идентификатор связанной книги.</param>
            <returns>Идентификатор подтвержденного предложения.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.OffersCollectorService.OffersCollectorService.RemoveOffer(System.Guid,System.Int64)">
            <summary>
            Удаляет предложение.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="userId">Идентификатор пользователя, который удаляет предложение.</param>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.OffersCollectorService.OffersCollectorService.GetOffers(System.Collections.Generic.HashSet{BooksExchanger.Models.ModerationStatus},System.Nullable{System.Guid},System.Nullable{System.Int64})">
            <summary>
            Получает список предложений по заданным критериям.
            </summary>
            <param name="needStatuses">Статусы предложений, которые необходимо получить.</param>
            <param name="offerId">Идентификатор конкретного предложения.</param>
            <param name="userId">Идентификатор пользователя, чьи предложения требуется получить.</param>
            <returns>Коллекция предложений, удовлетворяющих заданным критериям.</returns>
        </member>
        <member name="T:BooksExchanger.Services.Implementations.OfferService.OfferService">
            <summary>
            Сервис для работы с предложениями книг.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.OfferService.OfferService.#ctor(BooksExchanger.Repositories.Interfaces.IOfferRepository,BooksExchanger.Repositories.Interfaces.IGenreRepository)">
            <summary>
            Конструктор сервиса предложений.
            </summary>
            <param name="offerRepository">Репозиторий предложений.</param>
            <param name="genreRepository">Репозиторий жанров.</param>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.OfferService.OfferService.GetOffer(System.Guid)">
            <summary>
            Получает предложение по идентификатору.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <returns>Объект предложения.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.OfferService.OfferService.IsOfferFavoriteForUser(System.Int64,System.Guid)">
            <summary>
            Проверяет, добавлено ли предложение в избранное у пользователя.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <param name="offerId">Идентификатор предложения.</param>
            <returns>True, если предложение в избранном у пользователя. Иначе false.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.OfferService.OfferService.GetOffers(System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Получает список предложений книг в соответствии с указанными фильтрами.
            </summary>
            <param name="genreId">Идентификатор жанра (опционально).</param>
            <param name="city">Город (опционально).</param>
            <param name="userId">Идентификатор пользователя, предложения которого нужно получить (опционально).</param>
            <param name="notUserId">Идентификатор пользователя, предложения которого нужно исключить (опционально).</param>
            <returns>Коллекция предложений книг.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.OfferService.OfferService.AddOfferToFavorite(System.Guid,System.Int64)">
            <summary>
            Добавляет предложение в избранное пользователя.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="userId">Идентификатор пользователя.</param>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.OfferService.OfferService.RemoveOfferFromFavorite(System.Guid,System.Int64)">
            <summary>
            Удаляет предложение из избранного пользователя.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="userId">Идентификатор пользователя.</param>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.OfferService.OfferService.RemoveOffer(System.Guid,System.Int64)">
            <summary>
            Удаляет предложение книги.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="userId">Идентификатор пользователя, владельца предложения.</param>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.OfferService.OfferService.GetFavoriteOffers(System.Int64)">
            <summary>
            Получает список избранных предложений пользователя.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <returns>Коллекция избранных предложений.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.OfferService.OfferService.GetOfferSelections(System.Nullable{System.Int64},System.String)">
            <summary>
            Получение подборок офферов.
            </summary>
            <param name="userId">id пользователя.</param>
            <param name="city">Город.</param>
            <returns></returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.OfferService.OfferService.SearchOffersByTitle(System.String)">
            <summary>
            Поиск офферов по названию.
            </summary>
            <param name="title">Название оффера.</param>
            <returns>Спискок офферов.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Implementations.OfferService.OfferService.SearchOffersByAuthor(System.String)">
            <summary>
            Поиск офферов по автору.
            </summary>
            <param name="author">Имя автора.</param>
            <returns>Спискок офферов.</returns>
        </member>
        <member name="T:BooksExchanger.Services.Interfaces.IAuthorService">
            <summary>
            Интерфейс сервиса для работы с авторами.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IAuthorService.AddAuthor(System.String)">
            <summary>
            Добавляет нового автора.
            </summary>
            <param name="name">Имя автора.</param>
            <returns>Идентификатор добавленного автора.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IAuthorService.UpdateAuthor(System.Int64,System.String)">
            <summary>
            Обновляет информацию об авторе.
            </summary>
            <param name="id">Идентификатор автора.</param>
            <param name="name">Новое имя автора.</param>
            <returns>Идентификатор обновленного автора.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IAuthorService.GetAuthors">
            <summary>
            Получает список всех авторов.
            </summary>
            <returns>Коллекция авторов.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IAuthorService.SearchAuthors(System.String)">
            <summary>
            Поиск авторов по имени.
            </summary>
            <param name="name">Имя автора для поиска.</param>
            <returns>Коллекция авторов, чьи имена соответствуют заданному условию.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IAuthorService.RemoveAuthor(System.Int64)">
            <summary>
            Удаляет автора по идентификатору.
            </summary>
            <param name="id">Идентификатор автора для удаления.</param>
        </member>
        <member name="T:BooksExchanger.Services.Interfaces.IChatService">
            <summary>
            Определяет интерфейс для службы чата, позволяющей получать доступ к чатам и сообщениям.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IChatService.GetChats(System.Int64)">
            <summary>
            Получает все чаты, ассоциированные с пользователем.
            </summary>
            <param name="userId">Идентификатор пользователя, чьи чаты необходимо получить.</param>
            <returns>Коллекция чатов указанного пользователя.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IChatService.GetChatWithMessages(System.Int64,System.Int64)">
            <summary>
            Получает чат между двумя пользователями вместе со всеми сообщениями.
            </summary>
            <param name="currentUserId">Идентификатор текущего пользователя.</param>
            <param name="secondUserId">Идентификатор второго пользователя, с которым ведется диалог.</param>
            <returns>Объект чата, содержащий информацию о чате и ассоциированные с ним сообщения.</returns>
        </member>
        <member name="T:BooksExchanger.Services.Interfaces.IFeedbackService">
            <summary>
            Интерфейс сервиса для работы с отзывами.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IFeedbackService.AddOrEditFeedback(System.Guid,System.Int64,System.String,System.Nullable{System.Int32})">
            <summary>
            Добавляет или редактирует отзыв к предложению.
            </summary>
            <param name="offerId">Идентификатор предложения, для которого добавляется отзыв.</param>
            <param name="authorId">Идентификатор автора отзыва.</param>
            <param name="text">Текст отзыва (необязательно).</param>
            <param name="estimation">Оценка (необязательно).</param>
            <returns>Идентификатор созданного или обновленного отзыва.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IFeedbackService.GetFeedbacks(System.Guid)">
            <summary>
            Получает отзывы для конкретного предложения.
            </summary>
            <param name="offerId">Идентификатор предложения, для которого запрашиваются отзывы.</param>
            <returns>Коллекцию отзывов для указанного предложения.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IFeedbackService.RemoveFeedback(System.Int64,System.Func{BooksExchanger.Models.Feedback,System.Boolean})">
            <summary>
            Удаляет отзыв.
            </summary>
            <param name="feedbackId">Идентификатор отзыва для удаления.</param>
            <param name="permissionsCheker">Функция проверки разрешения на удаление отзыва для пользователя.</param>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IFeedbackService.FilterOutUserFeedback(System.Collections.Generic.List{BooksExchanger.Models.Feedback},System.Int64)">
            <summary>
            Отфильтровывает отзывы пользователя из списка всех отзывов.
            </summary>
            <param name="feedbacks">Список отзывов, из которого необходимо отфильтровать.</param>
            <param name="userId">Идентификатор пользователя, отзывы которого необходимо отфильтровать.</param>
            <returns>Отзыв пользователя, если он есть в списке.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IGenreService.AddGenre(System.String)">
            <summary>
            Добавляет новый жанр.
            </summary>
            <param name="name">Название жанра.</param>
            <returns>Идентификатор добавленного жанра.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IGenreService.UpdateGenre(System.Int32,System.String)">
            <summary>
            Обновляет информацию по существующему жанру.
            </summary>
            <param name="id">Идентификатор жанра.</param>
            <param name="name">Новое название жанра.</param>
            <returns>Идентификатор обновленного жанра.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IGenreService.GetGenres">
            <summary>
            Возвращает список всех жанров.
            </summary>
            <returns>Коллекцию всех жанров.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IGenreService.SearchGenres(System.String)">
            <summary>
            Ищет жанры по названию.
            </summary>
            <param name="name">Название жанра для поиска.</param>
            <returns>Коллекцию жанров, соответствующих заданному названию.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IGenreService.RemoveGenre(System.Int32)">
            <summary>
            Удаляет жанр по его идентификатору.
            </summary>
            <param name="id">Идентификатор удаляемого жанра.</param>
        </member>
        <member name="T:BooksExchanger.Services.Interfaces.IImageStorageService">
            <summary>
            Определяет интерфейс для службы хранения изображений, позволяющей загружать изображения и получать ссылки на них.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IImageStorageService.UploadImageAndGetLink(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Загружает изображение и возвращает ссылку на загруженное изображение.
            </summary>
            <param name="image">Файл изображения для загрузки.</param>
            <returns>Задача, результатом которой является строка, содержащая ссылку на загруженное изображение.</returns>
        </member>
        <member name="T:BooksExchanger.Services.Interfaces.IOffersCollectorService">
            <summary>
            Интерфейс сервиса для управления предложениями книг.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IOffersCollectorService.CreateOffer(System.Int64,System.String,System.String,System.String,System.String,Microsoft.AspNetCore.Http.IFormFile,System.Nullable{System.Decimal})">
            <summary>
            Создает новое предложение книги.
            </summary>
            <param name="userId">Идентификатор пользователя, создающего предложение.</param>
            <param name="title">Название книги.</param>
            <param name="authors">Авторы книги.</param>
            <param name="city">Город, в котором находится книга.</param>
            <param name="description">Описание книги (необязательно).</param>
            <param name="image">Изображение обложки книги (необязательно).</param>
            <param name="price">Цена книги (необязательно).</param>
            <returns>Идентификатор созданного предложения.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IOffersCollectorService.RejectOffer(System.Guid,System.String)">
            <summary>
            Отклоняет предложение книги по указанной причине.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="reason">Причина отклонения предложения.</param>
            <returns>Идентификатор отклоненного предложения.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IOffersCollectorService.ApproveOfferAndGetId(System.Guid,System.Int64)">
            <summary>
            Одобряет предложение книги и связывает его с существующей книгой.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="linkedBookId">Идентификатор книги, с которой будет связано предложение.</param>
            <returns>Идентификатор подтвержденного предложения.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IOffersCollectorService.RemoveOffer(System.Guid,System.Int64)">
            <summary>
            Удаляет предложение книги.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="userId">Идентификатор пользователя, который является владельцем предложения.</param>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IOffersCollectorService.GetOffers(System.Collections.Generic.HashSet{BooksExchanger.Models.ModerationStatus},System.Nullable{System.Guid},System.Nullable{System.Int64})">
            <summary>
            Получает предложения книг в соответствии с указанными критериями.
            </summary>
            <param name="needStatuses">Набор статусов модерации, по которым выполняется фильтрация предложений.</param>
            <param name="offerId">Идентификатор конкретного предложения (необязательно).</param>
            <param name="userId">Идентификатор пользователя, чьи предложения нужно получить (необязательно).</param>
            <returns>Коллекция предложений книг.</returns>
        </member>
        <member name="T:BooksExchanger.Services.Interfaces.IOfferService">
            <summary>
            Определяет интерфейс для службы управления предложениями обмена книгами.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IOfferService.GetOffer(System.Guid)">
            <summary>
            Получает информацию о предложении по его идентификатору.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <returns>Данные предложения.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IOfferService.IsOfferFavoriteForUser(System.Int64,System.Guid)">
            <summary>
            Проверяет, размечено ли предложение как избранное у пользователя.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <param name="offerId">Идентификатор предложения.</param>
            <returns>true, если предложение находится в избранных у пользователя; иначе false.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IOfferService.GetOffers(System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Получает список предложений на основе заданных критериев.
            </summary>
            <param name="genreId">Идентификатор жанра.</param>
            <param name="city">Город.</param>
            <param name="userId">Идентификатор пользователя, предложения которого требуется исключить.</param>
            <param name="notUserId">Идентификатор пользователя, чьи предложения требуется исключить из поиска.</param>
            <returns>Коллекция подходящих предложений.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IOfferService.AddOfferToFavorite(System.Guid,System.Int64)">
            <summary>
            Добавляет предложение в избранное пользователя.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="userId">Идентификатор пользователя.</param>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IOfferService.RemoveOfferFromFavorite(System.Guid,System.Int64)">
            <summary>
            Удаляет предложение из избранных у пользователя.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="userId">Идентификатор пользователя.</param>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IOfferService.RemoveOffer(System.Guid,System.Int64)">
            <summary>
            Удаляет предложение обмена.
            </summary>
            <param name="offerId">Идентификатор предложения.</param>
            <param name="userId">Идентификатор пользователя, совершающего удаление.</param>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IOfferService.GetFavoriteOffers(System.Int64)">
            <summary>
            Получает список избранных предложений пользователя.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <returns>Коллекция предложений, помеченных как избранное у пользователя.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IOfferService.GetOfferSelections(System.Nullable{System.Int64},System.String)">
            <summary>
            Получает список рекомендаций для предложений на основе предпочтений пользователя и его местоположения.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <param name="city">Город пользователя.</param>
            <returns>Список рекомендаций для предложений.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IOfferService.SearchOffersByTitle(System.String)">
            <summary>
            Ищет предложения по названию книги.
            </summary>
            <param name="title">Название книги.</param>
            <returns>Список предложений, чьи названия соответствуют запросу.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IOfferService.SearchOffersByAuthor(System.String)">
            <summary>
            Ищет предложения по автору книги.
            </summary>
            <param name="author">Автор книги.</param>
            <returns>Список предложений, чьи авторы соответствуют запросу.</returns>
        </member>
        <member name="T:BooksExchanger.Services.Interfaces.ISearchService">
            <summary>
            Определяет интерфейс сервиса для поиска предложений.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.ISearchService.SearchOffersByTitle(System.String)">
            <summary>
            Ищет предложения по названию книги.
            </summary>
            <param name="title">Название книги.</param>
            <returns>Коллекцию предложений, соответствующих заданному названию книги.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.ISearchService.SearchOffersByAuthor(System.String)">
            <summary>
            Ищет предложения по автору книги.
            </summary>
            <param name="author">Имя автора книги.</param>
            <returns>Коллекцию предложений, соответствующих указанному автору.</returns>
        </member>
        <member name="T:BooksExchanger.Services.Interfaces.IUserService">
            <summary>
            Интерфейс сервиса для работы с пользовательскими данными.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IUserService.GetAuthToken(System.String,System.String)">
            <summary>
            Получает токен аутентификации для пользователя.
            </summary>
            <param name="email">Электронная почта пользователя.</param>
            <param name="password">Пароль пользователя.</param>
            <returns>Строка токена аутентификации.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IUserService.RegisterUser(System.String,System.String,System.String)">
            <summary>
            Регистрирует нового пользователя и возвращает токен аутентификации.
            </summary>
            <param name="name">Имя пользователя.</param>
            <param name="email">Электронная почта пользователя.</param>
            <param name="password">Пароль пользователя.</param>
            <returns>Строка токена аутентификации для регистрации.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IUserService.IsUserRegistered(System.String)">
            <summary>
            Проверяет, зарегистрирован ли пользователь с указанной электронной почтой.
            </summary>
            <param name="email">Электронная почта для проверки.</param>
            <returns>True, если пользователь с такой электронной почтой уже зарегистрирован; иначе false.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IUserService.IsUserExist(System.Int64)">
            <summary>
            Проверяет, существует ли пользователь с указанным идентификатором.
            </summary>
            <param name="userId">Идентификатор пользователя.</param>
            <returns>True, если пользователь существует; иначе false.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IUserService.SetAdmin(System.String)">
            <summary>
            Назначает роль администратора пользователю по его электронной почте.
            </summary>
            <param name="email">Электронная почта пользователя.</param>
        </member>
        <member name="T:BooksExchanger.Services.Interfaces.IVerificationCodeService">
            <summary>
            Определяет интерфейс сервиса для работы с кодами верификации пользователей.
            </summary>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IVerificationCodeService.VerifyUser(System.String,System.String)">
            <summary>
            Проверяет пользователя, используя адрес электронной почты и код верификации.
            </summary>
            <param name="userEmail">Адрес электронной почты пользователя.</param>
            <param name="verificationCode">Код верификации.</param>
            <returns>Краткую информацию о пользователе, если верификация прошла успешно.</returns>
        </member>
        <member name="M:BooksExchanger.Services.Interfaces.IVerificationCodeService.SendCodeAndRememberUser(BooksExchanger.Models.ShortUserInfo)">
            <summary>
            Отправляет код верификации пользователю и запоминает информацию о нем.
            </summary>
            <param name="userInfo">Краткая информация о пользователе.</param>
        </member>
        <member name="T:BooksExchanger.VerificationCodesManager.Exceptions.FailSendCodeException">
            <summary>
            Не удалось отправить код подтверждения.
            </summary>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.Exceptions.FailSendCodeException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.Exceptions.FailSendCodeException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.Exceptions.FailSendCodeException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.Exceptions.FailSendCodeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.VerificationCodesManager.Exceptions.InvalidVerificationCodeException">
            <summary>
            Неверный код подтверждения.
            </summary>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.Exceptions.InvalidVerificationCodeException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.Exceptions.InvalidVerificationCodeException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.Exceptions.InvalidVerificationCodeException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.VerificationCodesManager.Exceptions.UserAlreadyWaitConfirmationException">
            <summary>
            Пользователь уже ожидает подтверждения.
            </summary>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.Exceptions.UserAlreadyWaitConfirmationException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.Exceptions.UserAlreadyWaitConfirmationException.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.Exceptions.UserAlreadyWaitConfirmationException.#ctor(System.String,System.Exception)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:BooksExchanger.VerificationCodesManager.CodeWithDetails">
            <summary>
            Содержит информацию о коде подтверждения с деталями пользователя.
            </summary>
        </member>
        <member name="P:BooksExchanger.VerificationCodesManager.CodeWithDetails.User">
            <summary>
            Пользователь, связанный с кодом подтверждения.
            </summary>
        </member>
        <member name="P:BooksExchanger.VerificationCodesManager.CodeWithDetails.VerificationCode">
            <summary>
            Код подтверждения.
            </summary>
        </member>
        <member name="F:BooksExchanger.VerificationCodesManager.CodeWithDetails._timeOfCreation">
            <summary>
            Время создания кода подтверждения.
            </summary>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.CodeWithDetails.#ctor(BooksExchanger.Models.ShortUserInfo,System.String)">
            <summary>
            Конструктор класса CodeWithDetails.
            </summary>
            <param name="user">Информация о пользователе.</param>
            <param name="verificationCode">Код подтверждения.</param>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.CodeWithDetails.IsEqualsVerificationCode(System.String)">
            <summary>
            Проверяет соответствие указанного кода сохраненному коду подтверждения.
            </summary>
            <param name="code">Код для проверки.</param>
            <returns>true, если указанный код совпадает с кодом подтверждения; иначе false.</returns>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.CodeWithDetails.IsDurationOfExistsOverdue(System.Int32)">
            <summary>
            Проверяет, просрочено ли время жизни кода подтверждения.
            </summary>
            <param name="lifeTimeMinutes">Время жизни кода подтверждения в минутах.</param>
            <returns>true, если время жизни кода подтверждения истекло; иначе false.</returns>
        </member>
        <member name="T:BooksExchanger.VerificationCodesManager.EmailParams">
            <summary>
            Параметры письма.
            </summary>
            <param name="EmailSenderHeader">Заголовок отпарвителя.</param>
            <param name="EmailHeader">Заголовок письма.</param>
            <param name="MessageBody">Текст письма.</param>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.EmailParams.#ctor(System.String,System.String,System.String)">
            <summary>
            Параметры письма.
            </summary>
            <param name="EmailSenderHeader">Заголовок отпарвителя.</param>
            <param name="EmailHeader">Заголовок письма.</param>
            <param name="MessageBody">Текст письма.</param>
        </member>
        <member name="P:BooksExchanger.VerificationCodesManager.EmailParams.EmailSenderHeader">
            <summary>Заголовок отпарвителя.</summary>
        </member>
        <member name="P:BooksExchanger.VerificationCodesManager.EmailParams.EmailHeader">
            <summary>Заголовок письма.</summary>
        </member>
        <member name="P:BooksExchanger.VerificationCodesManager.EmailParams.MessageBody">
            <summary>Текст письма.</summary>
        </member>
        <member name="T:BooksExchanger.VerificationCodesManager.SmtpGmailSettings">
            <summary>
            Настройки для отправки письма.
            </summary>
        </member>
        <member name="P:BooksExchanger.VerificationCodesManager.SmtpGmailSettings.SmtpGmailString">
            <summary>
            Строка для отправки письма.
            </summary>
        </member>
        <member name="P:BooksExchanger.VerificationCodesManager.SmtpGmailSettings.SmtpGmailPort">
            <summary>
            Порт для отправки письма.
            </summary>
        </member>
        <member name="P:BooksExchanger.VerificationCodesManager.SmtpGmailSettings.GmailKey">
            <summary>
            Ключ для отправки письма.
            </summary>
        </member>
        <member name="P:BooksExchanger.VerificationCodesManager.SmtpGmailSettings.EmailForSmtp">
            <summary>
            Адрес электронной почты.
            </summary>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.SmtpGmailSettings.BuildDefault">
            <summary>
            Билдер настроек.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BooksExchanger.VerificationCodesManager.VerificationCodeService">
            <summary>
            Сервис для кодов подтверждения.
            </summary>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.VerificationCodeService.#ctor(System.Int32,BooksExchanger.VerificationCodesManager.EmailParams)">
            <summary>
            Инициализирует новый экземпляр сервиса управления верификационными кодами.
            </summary>
            <param name="codesLifeDurationMinutes">Время жизни кода подтверждения в минутах.</param>
            <param name="emailParams">Параметры отправляемого электронного письма.</param>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.VerificationCodeService.SendCodeAndRememberUser(BooksExchanger.Models.ShortUserInfo)">
            <summary>
            Отправляет код подтверждения на электронную почту пользователя и запоминает его данные.
            </summary>
            <param name="userInfo">Краткая информация о пользователе.</param>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.VerificationCodeService.VerifyUser(System.String,System.String)">
            <summary>
            Проверяет верификационный код, отправленный пользователем, и возвращает его краткую информацию, если код верный.
            </summary>
            <param name="userEmail">Электронная почта пользователя.</param>
            <param name="verificationCode">Верификационный код.</param>
            <returns>Краткая информация о пользователе.</returns>
        </member>
        <member name="M:BooksExchanger.VerificationCodesManager.VerificationCodeService.UpdateVerificationCodes(System.Object)">
            <summary>
            Очищает словарь от устаревших верификационных кодов.
            </summary>
            <param name="obj">Не используется.</param>
        </member>
        <member name="T:BooksExchanger.MetanitHub.CustomUserIdProvider">
            <summary>
            Класс пользователя.
            </summary>
        </member>
        <member name="M:BooksExchanger.MetanitHub.CustomUserIdProvider.GetUserId(Microsoft.AspNetCore.SignalR.HubConnectionContext)">
            <summary>
            Получает id пользователя.
            </summary>
            <param name="connection">Подкючение.</param>
            <returns>Id пользователя.</returns>
        </member>
        <member name="T:BooksExchanger.MetanitHub.ChatHub">
            <summary>
            Хаб чата.
            </summary>
        </member>
        <member name="M:BooksExchanger.MetanitHub.ChatHub.#ctor(BooksExchanger.Repositories.Interfaces.IUserRepository,BooksExchanger.Repositories.Interfaces.IChatRepository)">
            <summary>
            Конструктор.
            </summary>
            <param name="userRepository">Хранилище пользователей.</param>
            <param name="chatRepository">Хранилище чатов.</param>
        </member>
        <member name="M:BooksExchanger.MetanitHub.ChatHub.OnConnectedAsync">
            <summary>
            Обработчик подключения нового клиента.
            </summary>
        </member>
        <member name="M:BooksExchanger.MetanitHub.ChatHub.Send(BooksExchanger.Models.SendMessage)">
            <summary>
            Отправляет сообщение.
            </summary>
        </member>
        <member name="T:BooksExchanger.ImageStorageService">
            <summary>
            Сервис для работы с хранилищем изображений на Яндекс.Диске.
            </summary>
        </member>
        <member name="M:BooksExchanger.ImageStorageService.#cctor">
            <summary>
            Инициализирует статический экземпляр сервиса Yandex.Disk.
            </summary>
        </member>
        <member name="M:BooksExchanger.ImageStorageService.UploadImageAndGetLink(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Загружает изображение и возвращает ссылку на него.
            </summary>
            <param name="image">Файл изображения.</param>
            <returns>Ссылку на загруженное изображение.</returns>
        </member>
    </members>
</doc>
